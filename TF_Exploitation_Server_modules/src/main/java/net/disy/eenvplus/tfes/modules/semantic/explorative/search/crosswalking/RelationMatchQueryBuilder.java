//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.modules.semantic.explorative.search.crosswalking;

import static com.hp.hpl.jena.graph.NodeFactory.createURI;
import static com.hp.hpl.jena.graph.NodeFactory.createVariable;
import static com.hp.hpl.jena.graph.Triple.create;
import static net.disy.eenvplus.tfes.modules.sparql.element.ElementGroupBuilder.createGroup;
import static net.disy.eenvplus.tfes.modules.sparql.element.SparqlElementFactory.createExactMatchUnion;
import net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes;
import net.disy.eenvplus.tfes.modules.sparql.query.SparqlQueryBuilder;

import com.hp.hpl.jena.graph.Node;
import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.sparql.syntax.Element;

// NOT_PUBLISHED
public class RelationMatchQueryBuilder {

  private String queriedUri;
  private String relationLabel;
  private String conceptLabel;
  private SparqlNodes relation;
  private SparqlNodes match;
  private static final Node EXACT_MATCH = createVariable("exactMatch"); //$NON-NLS-1$

  private RelationMatchQueryBuilder(String queriedUri, String relationLabel, String conceptLabel) {
    this.queriedUri = queriedUri;
    this.relationLabel = relationLabel;
    this.conceptLabel = conceptLabel;
  }

  public static RelationMatchQueryBuilder createRelationQuery(
      String queriedUri,
      String relationLabel,
      String conceptLabel) {
    return new RelationMatchQueryBuilder(queriedUri, relationLabel, conceptLabel);
  }

  public RelationMatchQueryBuilder withRelation(SparqlNodes relation) {
    this.relation = relation;
    return this;
  }

  public RelationMatchQueryBuilder withMatch(SparqlNodes match) {
    this.match = match;
    return this;
  }

  public Query createQuery() {

    return SparqlQueryBuilder
        .createSelectQuery()
        .withBody(createBody())
        .addResultVariable(relationLabel, match.createUriValueNode())
        .addResultVariable(conceptLabel)
        .getQuery();
  }

  private Element createBody() {
    return createGroup()
        .add(createExactMatchUnion(createURI(queriedUri), EXACT_MATCH))
        .add(create(EXACT_MATCH, relation.createUriNode(), createVariable(conceptLabel)))
        .build();
  }
}
