package net.disy.eenvplus.tfes.modules.semantic.explorative.search.crosswalking;

import static java.util.Arrays.asList;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.BROADER;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.BROAD_MATCH;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.EXACT_MATCH;
import static org.hamcrest.Matchers.containsInAnyOrder;
import static org.hamcrest.Matchers.hasToString;
import static org.hamcrest.Matchers.startsWith;
import static org.hamcrest.Matchers.stringContainsInOrder;
import static org.junit.Assert.assertThat;

import org.junit.Test;

import com.hp.hpl.jena.query.Query;

@SuppressWarnings("nls")
public class RelationMatchQueryBuilderTest {
  private static final String CONCEPT_LABEL = "concept";
  private static final String RELATION_LABEL = "relation";
  private static final String TEST_CONCEPT_URI = "testConceptUri";
  private Query query = RelationMatchQueryBuilder
      .createRelationQuery(TEST_CONCEPT_URI, RELATION_LABEL, CONCEPT_LABEL)
      .withMatch(BROAD_MATCH)
      .withRelation(BROADER)
      .createQuery();

  @Test
  public void containsSelect() throws Exception {
    assertThat(query, hasToString(startsWith("SELECT")));
  }

  @Test
  public void containsResultVars() throws Exception {
    assertThat(query.getResultVars(), containsInAnyOrder(RELATION_LABEL, CONCEPT_LABEL));
  }

  @Test
  public void containsResultVarAlias() throws Exception {
    assertThat(
        query,
        hasToString(stringContainsInOrder(asList(BROAD_MATCH.getUri(), "AS", RELATION_LABEL))));
  }

  @Test
  public void containsExactMatchTriple() throws Exception {
    assertThat(
        query,
        hasToString(stringContainsInOrder(asList(TEST_CONCEPT_URI, EXACT_MATCH.getUri()))));
  }

  @Test
  public void containsRelationTriple() throws Exception {
    assertThat(query, hasToString(stringContainsInOrder(asList(BROADER.getUri(), CONCEPT_LABEL))));
  }

}
