package net.disy.eenvplus.tfes.core.module;

import static net.disy.eenvplus.tfes.core.api.response.ILabelledConceptMatcher.hasTitle;
import static org.hamcrest.Matchers.any;
import static org.hamcrest.Matchers.contains;
import static org.hamcrest.Matchers.containsInAnyOrder;
import static org.hamcrest.Matchers.equalTo;
import static org.junit.Assert.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.Collection;

import net.disy.eenvplus.tfes.core.api.exceptions.ServiceException;
import net.disy.eenvplus.tfes.core.api.modules.ISuggestionProviderServiceModule;
import net.disy.eenvplus.tfes.core.api.query.ISuggestionQuery;
import net.disy.eenvplus.tfes.core.api.response.ISuggestion;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class SuggestionModulesManagerTest {
  private static final String SERVICE_MODUL_ID_1 = "Test Modul 1"; //$NON-NLS-1$
  private static final String SERVICE_MODUL_ID_2 = "Test Modul 2"; //$NON-NLS-1$
  protected static final String SIMPLE_SUGGESTION_TITLE = "Test Suggestion Title"; //$NON-NLS-1$
  protected static final String OTHER_SUGGESTION_TITLE = "Other Suggestion Title"; //$NON-NLS-1$

  @Mock
  private ISuggestion simpleSuggestion;
  @Mock
  private ISuggestion otherSuggestion;

  private SuggestionModulesManager manager = new SuggestionModulesManager();

  @Before
  public void initSuggestionMocks() {
    when(simpleSuggestion.getLabel()).thenReturn(SIMPLE_SUGGESTION_TITLE);
    when(otherSuggestion.getLabel()).thenReturn(OTHER_SUGGESTION_TITLE);
  }

  @Test
  public void getsSingleSuggestionOneModule() throws ServiceException {
    ISuggestionProviderServiceModule serviceModule = SuggestionProviderServiceModuleMockBuilder
        .createMock(SERVICE_MODUL_ID_1)
        .withAnswer(any(ISuggestionQuery.class), simpleSuggestion)
        .build();
    manager.getServiceModules().add(serviceModule);

    ISuggestionQuery query = mock(ISuggestionQuery.class);

    Collection<ISuggestion> result = manager.getSuggestions(query);

    verify(serviceModule).getSuggestions(query);
    assertThat(result, contains(hasTitle(equalTo(SIMPLE_SUGGESTION_TITLE))));
  }

  @SuppressWarnings("unchecked")
  @Test
  public void getsDoubleSuggestionOneModules() throws ServiceException {
    ISuggestionProviderServiceModule serviceModule = SuggestionProviderServiceModuleMockBuilder
        .createMock(SERVICE_MODUL_ID_1)
        .withAnswer(any(ISuggestionQuery.class), simpleSuggestion, otherSuggestion)
        .build();
    manager.getServiceModules().add(serviceModule);

    ISuggestionQuery query = mock(ISuggestionQuery.class);

    Collection<ISuggestion> result = manager.getSuggestions(query);

    verify(serviceModule).getSuggestions(query);
    assertThat(
        result,
        containsInAnyOrder(
            hasTitle(equalTo(SIMPLE_SUGGESTION_TITLE)),
            hasTitle(equalTo(OTHER_SUGGESTION_TITLE))));
  }

  @SuppressWarnings("unchecked")
  @Test
  public void getsSingleSuggestionTwoModules() throws ServiceException {
    ISuggestionProviderServiceModule serviceModule = SuggestionProviderServiceModuleMockBuilder
        .createMock(SERVICE_MODUL_ID_1)
        .withAnswer(any(ISuggestionQuery.class), simpleSuggestion)
        .build();
    manager.getServiceModules().add(serviceModule);

    ISuggestionProviderServiceModule otherServiceModule = SuggestionProviderServiceModuleMockBuilder
        .createMock(SERVICE_MODUL_ID_2)
        .withAnswer(any(ISuggestionQuery.class), otherSuggestion)
        .build();
    manager.getServiceModules().add(otherServiceModule);

    ISuggestionQuery query = mock(ISuggestionQuery.class);

    Collection<ISuggestion> result = manager.getSuggestions(query);

    verify(serviceModule).getSuggestions(query);
    assertThat(
        result,
        containsInAnyOrder(
            hasTitle(equalTo(SIMPLE_SUGGESTION_TITLE)),
            hasTitle(equalTo(OTHER_SUGGESTION_TITLE))));
  }

}
