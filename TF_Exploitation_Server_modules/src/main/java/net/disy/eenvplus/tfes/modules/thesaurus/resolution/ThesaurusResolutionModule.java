//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.modules.thesaurus.resolution;

import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import net.disy.eenvplus.tfes.core.api.capabilities.ParameterDescription;
import net.disy.eenvplus.tfes.core.api.capabilities.ServiceModuleDescription;
import net.disy.eenvplus.tfes.core.api.modules.IResolveThesaurusProviderServiceModule;
import net.disy.eenvplus.tfes.core.api.query.IResolveThesaurusQuery;
import net.disy.eenvplus.tfes.core.api.response.IResolveThesaurus;
import net.disy.eenvplus.tfes.modules.core.ISparqlConnector;

import org.springframework.beans.factory.annotation.Autowired;

import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.query.QueryFactory;
import com.hp.hpl.jena.query.ResultSet;

// NOT_PUBLISHED

public class ThesaurusResolutionModule implements IResolveThesaurusProviderServiceModule {

  @Autowired
  private ISparqlConnector sparqlConnector;

  @Autowired
  private ResolveThesaurusResultSetMapper resultSetMapper;

  static final String SERVICE_ID = "Keyword Explanation Module"; //$NON-NLS-1$

  @Override
  public ServiceModuleDescription getDescription() {
    List<ParameterDescription> parameterDescriptions = Collections.emptyList();
    return new ServiceModuleDescription(SERVICE_ID, parameterDescriptions);
  }

  @Override
  public Callable<IResolveThesaurus> getResolveThesaurus(final IResolveThesaurusQuery query) {
    return new Callable<IResolveThesaurus>() {

      @Override
      public IResolveThesaurus call() throws Exception {

        @SuppressWarnings("nls")
        String stringQuery = "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>"
            + "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>"
            + "PREFIX skos: <http://www.w3.org/2004/02/skos/core#>"
            + "PREFIX dcterms: <http://purl.org/dc/terms/>"
            + "select  * WHERE {"
            + "<"
            + query.getConcept()
            + "> skos:inScheme ?scheme."
            + "optional{ ?scheme rdfs:label ?thesaurusShortName}"
            + "optional{?scheme dcterms:title ?CI_Citation_title}."
            + "optional{?scheme dcterms:modified ?CI_Date_date_of_revision}"
            + "optional{?scheme dcterms:created ?CI_Date_date_of_creation}"
            + "}";
        Query query = QueryFactory.create(stringQuery);

        ResultSet result = sparqlConnector.executeSparqlQuery(query);
        return resultSetMapper.map(result);
      }
    };
  }
}
