//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.web.endpoint.controller;

import static java.util.Collections.emptyList;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.annotation.PostConstruct;

import net.disy.eenvplus.tfes.core.api.capabilities.IDataSourceConfiguration;
import net.disy.eenvplus.tfes.core.api.capabilities.ParameterDescription;
import net.disy.eenvplus.tfes.core.api.service.IDataSourceProvider;
import net.disy.eenvplus.tfes.web.api.rest.RestApiDataSource;
import net.disy.eenvplus.tfes.web.api.rest.RestApiExploitationCapabilities;
import net.disy.eenvplus.tfes.web.api.rest.RestApiOperation;
import net.disy.eenvplus.tfes.web.api.rest.RestApiParameter;
import net.disy.eenvplus.tfes.web.api.rest.RestApiServiceMetadata;
import net.disy.eenvplus.tfes.web.api.rest.RestApiServiceModule;
import net.disy.eenvplus.tfes.web.endpoint.core.ISelfDescribingOperation;
import net.disy.eenvplus.tfes.web.endpoint.core.OperationDescription;
import net.disy.eenvplus.tfes.web.endpoint.core.RestEndpointDescription;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.env.Environment;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

// NOT_PUBLISHED
@RestController
@RequestMapping("${rest.capa.path}")
public class GetCapabilitiesController {

  static final String REST_CAPABILITIES_PATH = "rest.capa.path"; //$NON-NLS-1$

  @Autowired
  private Environment environment;

  @Autowired(required = false)
  private List<ISelfDescribingOperation> operations = new ArrayList<>();

  @Autowired
  private ServiceMetadataFactory serviceMetadataFactory;

  @Autowired
  private IDataSourceProvider dataSourceProvider;

  @Value("${reload.datasources.on.get.capabilities}")
  private boolean reloadDataSourcesOnGetCapabilities;

  @Value("${capabilities.datasources.max.rank}")
  Double maxRank;

  @Value("${capabilities.datasources.min.rank}")
  Double minRank;

  // Cannot autowire myself, so manually add interface method
  @PostConstruct
  void insertOwnOperationDescription() {
    operations.add(new ISelfDescribingOperation() {

      @Override
      public OperationDescription getOperationDescription() {
        String type = environment.getProperty(REST_CAPABILITIES_PATH);
        String onlineResource = environment.getProperty(REST_CAPABILITIES_PATH);
        List<RestEndpointDescription> endpointDescriptions = emptyList();
        return new OperationDescription(
            type,
            onlineResource,
            RequestMethod.GET,
            endpointDescriptions);
      }
    });
  }

  @RequestMapping(method = RequestMethod.GET, produces = "application/json; charset=UTF-8")
  public @ResponseBody RestApiExploitationCapabilities getCapabilities() {

    RestApiExploitationCapabilities result = new RestApiExploitationCapabilities();

    result.setService(createRepsonseServiceMetadata());
    result.getDataSources().addAll(createResponseDataSources());
    result.getOperations().addAll(createResponseOperations());

    return result;
  }

  private RestApiServiceMetadata createRepsonseServiceMetadata() {
    return serviceMetadataFactory.create();
  }

  private List<RestApiDataSource> createResponseDataSources() {
    Collection<IDataSourceConfiguration> sources = getDataSources();
    List<RestApiDataSource> result = new ArrayList<>(sources.size());
    for (IDataSourceConfiguration dataSource : sources) {
      RestApiDataSource current = convertDataSourceConfiguration(dataSource);
      result.add(current);
    }
    return result;
  }

  private Collection<IDataSourceConfiguration> getDataSources() {
    if (reloadDataSourcesOnGetCapabilities) {
      // Ensure Loading DataSources via SparQL
      dataSourceProvider.resetCache();
    }
    return dataSourceProvider.getSources();
  }

  private RestApiDataSource convertDataSourceConfiguration(
      IDataSourceConfiguration dataSourceConfiguration) {
    RestApiDataSource dataSource = new RestApiDataSource();
    dataSource.setName(dataSourceConfiguration.getName());
    dataSource.setOnlineResource(dataSourceConfiguration.getOnlineResource());
    dataSource.getSupportedLanguages().addAll(dataSourceConfiguration.getLanguages());
    mapRank(dataSourceConfiguration, dataSource);
    return dataSource;
  }

  private void mapRank(
      IDataSourceConfiguration dataSourceConfiguration,
      RestApiDataSource dataSource) {
    Double source = dataSourceConfiguration.getRank();
    if (source == null
        || source.isNaN()
        || source.isInfinite()
        || source > maxRank
        || source < minRank) {
      return;
    }
    dataSource.setRank(source);
  }

  private List<RestApiOperation> createResponseOperations() {
    List<RestApiOperation> result = new ArrayList<>(operations.size());
    for (ISelfDescribingOperation current : operations) {
      OperationDescription operationDescription = current.getOperationDescription();
      result.add(convertOperation(operationDescription));
    }
    return result;
  }

  private RestApiOperation convertOperation(OperationDescription operationDescription) {
    RestApiOperation operation = new RestApiOperation();
    operation.setType(operationDescription.getType());
    operation.setOnlineResource(operationDescription.getOnlineResource());
    operation.setMethod(operationDescription.getMethod().toString());
    operation.getServiceModules().addAll(
        createResponseServiceModules(operationDescription.getEndpointDescriptions()));
    return operation;
  }

  private List<RestApiServiceModule> createResponseServiceModules(
      List<RestEndpointDescription> endpointDescriptions) {
    List<RestApiServiceModule> result = new ArrayList<>(endpointDescriptions.size());
    for (RestEndpointDescription restEndpointDescription : endpointDescriptions) {
      result.add(convertEndpointDescription(restEndpointDescription));
    }
    return result;
  }

  private RestApiServiceModule convertEndpointDescription(
      RestEndpointDescription restEndpointDescription) {
    RestApiServiceModule serviceModule = new RestApiServiceModule();
    serviceModule.setServiceId(restEndpointDescription.getServiceId());
    serviceModule.getParameters().addAll(
        createResponseParameter(restEndpointDescription.getParameters()));
    serviceModule.getExtraParameters().addAll(
        createResponseParameter(restEndpointDescription.getExtraParameters()));
    return serviceModule;
  }

  private List<RestApiParameter> createResponseParameter(List<ParameterDescription> parameters) {
    List<RestApiParameter> result = new ArrayList<>(parameters.size());
    for (ParameterDescription parameter : parameters) {
      result.add(convertParameterDescription(parameter));
    }
    return result;
  }

  private RestApiParameter convertParameterDescription(ParameterDescription parameter) {
    RestApiParameter responseParameter = new RestApiParameter();
    responseParameter.setName(parameter.getName());
    responseParameter.setFormat(parameter.getFormat());
    responseParameter.setDefault(parameter.getDefaultValue());
    return responseParameter;
  }

}
