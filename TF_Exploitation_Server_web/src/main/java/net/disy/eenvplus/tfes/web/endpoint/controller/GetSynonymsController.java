//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.web.endpoint.controller;

import static java.util.Collections.emptyList;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.CONCEPT;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.CROSS_WALKING;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.EXTRA_PARAMS;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.LANGUAGES;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.MAX_COUNT;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.SERVICE;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.SOURCE;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.THESAURI;
import static net.disy.eenvplus.tfes.web.endpoint.query.ServiceQueryBuilder.createSynonymsQuery;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import net.disy.eenvplus.tfes.core.api.exceptions.ServiceException;
import net.disy.eenvplus.tfes.core.api.response.ISynonym;
import net.disy.eenvplus.tfes.core.api.service.IServiceManager;
import net.disy.eenvplus.tfes.web.api.core.RestMethodParameters;
import net.disy.eenvplus.tfes.web.api.rest.RestApiKeywordObject;
import net.disy.eenvplus.tfes.web.api.rest.RestApiSynonyms;
import net.disy.eenvplus.tfes.web.endpoint.converter.RestApiKeywordConverter;
import net.disy.eenvplus.tfes.web.endpoint.core.ISelfDescribingOperation;
import net.disy.eenvplus.tfes.web.endpoint.core.OperationDescription;
import net.disy.eenvplus.tfes.web.endpoint.query.ServiceQuery;
import net.disy.eenvplus.tfes.web.validation.api.ISynonymsQueryValidator;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

// NOT_PUBLISHED

@RestController
@RequestMapping("${rest.synonyms.path}")
public class GetSynonymsController implements ISelfDescribingOperation {

  private static final String PATH_GET_SYNONYMS = "rest.synonyms.path"; //$NON-NLS-1$

  @Autowired
  IServiceManager serviceManager;

  @Autowired
  private Environment environment;

  @Autowired
  private ISynonymsQueryValidator queryValidator;

  @Autowired
  private RestApiKeywordConverter restApiKeywordConverter;

  @Override
  public OperationDescription getOperationDescription() {
    return OperationDescription.Builder
        .createDescriptionFor(
            environment.getProperty(PATH_GET_SYNONYMS),
            environment.getProperty(PATH_GET_SYNONYMS))
        .withRequestMethod(RequestMethod.GET)
        .withServiceModules(serviceManager.getSynonymsDescriptions())
        .withStringParameter(RestMethodParameters.CONCEPT)
        .withIntegerParameter(MAX_COUNT)
        .withStringParameter(THESAURI)
        .withStringParameter(SERVICE)
        .withStringParameter(LANGUAGES)
        .withBooleanParameter(CROSS_WALKING)
        .withBooleanParameter(SOURCE)
        .build();
  }

  @RequestMapping(method = RequestMethod.GET, produces = "application/json; charset=UTF-8")
  public @ResponseBody RestApiSynonyms getSynonyms(
      @RequestParam(value = CONCEPT) String concept,
      @RequestParam(value = MAX_COUNT, defaultValue = "0") int maxCount,
      @RequestParam(value = THESAURI, defaultValue = "") String thesauri,
      @RequestParam(value = SERVICE, defaultValue = "") String service,
      @RequestParam(value = LANGUAGES, defaultValue = "") String languages,
      @RequestParam(value = CROSS_WALKING, defaultValue = "false") boolean isCrossWalking,
      @RequestParam(value = SOURCE, defaultValue = "false") boolean isSource,
      @RequestParam(value = EXTRA_PARAMS, defaultValue = "") String extraParams)
      throws ServiceException {
    ServiceQuery query = createSynonymsQuery(concept)
        .withMaxCount(maxCount)
        .withThesauri(thesauri)
        .withServiceModules(service)
        .withLanguages(languages)
        .withExtraParameters(extraParams)
        .withCrossWalking(isCrossWalking)
        .withSource(isSource)
        .build();
    queryValidator.validate(query);
    Collection<ISynonym> synonyms = emptyList();
    synonyms = serviceManager.getSynonyms(query);
    return createResponse(synonyms);
  }

  private RestApiSynonyms createResponse(Collection<ISynonym> synonyms) {
    List<RestApiKeywordObject> responseObjects = new ArrayList<>(synonyms.size());
    for (ISynonym synonym : synonyms) {
      responseObjects.add(restApiKeywordConverter.convert(synonym));
    }
    RestApiSynonyms response = new RestApiSynonyms();
    response.getSynonyms().addAll(responseObjects);
    return response;
  }
}
