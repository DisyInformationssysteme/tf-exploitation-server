//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.modules.keyword.completion.crosswalking;

import static java.util.Arrays.asList;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.concurrent.Callable;

import net.disy.eenvplus.tfes.core.api.capabilities.ParameterDescription;
import net.disy.eenvplus.tfes.core.api.capabilities.ServiceModuleDescription;
import net.disy.eenvplus.tfes.core.api.modules.ISuggestionProviderServiceModule;
import net.disy.eenvplus.tfes.core.api.query.ISuggestionQuery;
import net.disy.eenvplus.tfes.core.api.response.ISuggestion;
import net.disy.eenvplus.tfes.core.util.CollectionUtilities;
import net.disy.eenvplus.tfes.modules.clustering.ClusterAggregator;
import net.disy.eenvplus.tfes.modules.clustering.ClusterKeyExtractor;
import net.disy.eenvplus.tfes.modules.core.ISparqlConnector;

import org.springframework.beans.factory.annotation.Autowired;

import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.query.ResultSet;

// NOT_PUBLISHED
public class KeywordCompletionCrossWalkingModule implements ISuggestionProviderServiceModule {

  private static final ClusterKeyExtractor<FullSuggestion, String> URI_EXTRACTOR = new ClusterKeyExtractor<FullSuggestion, String>() {
    @Override
    public Collection<String> extractKeys(FullSuggestion suggestion) {
      return asList(suggestion.getConceptUri(), suggestion.getMatchUri());
    }
  };

  static final String SOURCE_LABEL = "source_label"; //$NON-NLS-1$

  @Autowired
  private ISparqlConnector sparqlConnector;

  @Override
  public ServiceModuleDescription getDescription() {
    List<ParameterDescription> parameterDescriptions = Collections.emptyList();
    return new ServiceModuleDescription(
        "Keyword Completion Cross Walking Module", parameterDescriptions); //$NON-NLS-1$
  }

  @Override
  public Callable<Collection<ISuggestion>> getSuggestions(final ISuggestionQuery query) {
    return new Callable<Collection<ISuggestion>>() {

      @Override
      public Collection<ISuggestion> call() throws Exception {
        if (!query.isCrossWalkingActive()) {
          return Collections.emptyList();
        }

        Query sparqlQuery = SuggestionCrossWalkingSparqlQueryBuilder
            .createQuery(query.getKeyword(), SOURCE_LABEL)
            .withLanguages(query.getLanguages())
            .withSchemas(query.getThesauri())
            // no limit, since Result Count is not determined until Clustering and may be significantly smaller
            .withLimit(0)
            .withSource(query.isSourceActive())
            .build();
        ResultSet resultSet = sparqlConnector.executeSparqlQuery(sparqlQuery);
        Collection<FullSuggestion> plainResult = new FullSuggestionSparqlResultSetMapper(
            SOURCE_LABEL).map(resultSet);
        Collection<FullSuggestion> representatives = createAggregator().findRepresentatives(
            plainResult);
        return CollectionUtilities.limitResults(
            new ArrayList<ISuggestion>(representatives),
            query.getMaxCount());
      }

      private ClusterAggregator<FullSuggestion, String, ClusterKeyExtractor<FullSuggestion, String>, Comparator<FullSuggestion>> createAggregator() {
        return new ClusterAggregator<FullSuggestion, String, ClusterKeyExtractor<FullSuggestion, String>, Comparator<FullSuggestion>>(
            URI_EXTRACTOR,
            new FullSuggestionRankComparator());
      }

    };
  }

}
