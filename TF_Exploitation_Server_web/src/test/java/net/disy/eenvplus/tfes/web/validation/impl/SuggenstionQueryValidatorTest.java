package net.disy.eenvplus.tfes.web.validation.impl;

import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.KEYWORD;
import static net.disy.eenvplus.tfes.web.api.exceptions.ErrorResponseCodes.MISSING_PARAMETER;
import static net.disy.eenvplus.tfes.web.endpoint.core.IllegalQueryArgumentExceptionMatcher.hasArguments;
import static net.disy.eenvplus.tfes.web.endpoint.core.IllegalQueryArgumentExceptionMatcher.hasResponseCode;
import static net.disy.eenvplus.tfes.web.endpoint.query.ServiceQueryBuilder.createSuggestionQuery;
import static org.hamcrest.Matchers.arrayContaining;
import static org.hamcrest.Matchers.both;
import static org.hamcrest.Matchers.is;
import static org.junit.Assert.assertThat;
import net.disy.eenvplus.tfes.core.api.query.ISuggestionQuery;
import net.disy.eenvplus.tfes.core.api.service.IDataSourceProvider;
import net.disy.eenvplus.tfes.core.api.service.IServiceManager;
import net.disy.eenvplus.tfes.web.api.exceptions.IErrorResponseCode;
import org.hamcrest.Matchers;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

@SuppressWarnings("nls")
@RunWith(MockitoJUnitRunner.class)
public class SuggenstionQueryValidatorTest {

  private String TEST_KEYWORD = "TestKeyword";
  private String TEST_EMPTY_KEYWORD = "  ";

  @Rule
  public ExpectedException expected = ExpectedException.none();

  @Mock
  private IServiceManager serviceManager;

  @Mock
  private IDataSourceProvider dataSourceProvider;

  @InjectMocks
  private AbstractServiceQueryValidator<ISuggestionQuery> validator = new SuggenstionQueryValidator();

  @Test
  public void keywordIsValid() throws Exception {
    ISuggestionQuery query = createSuggestionQuery(TEST_KEYWORD).build();

    boolean isValid = validator.validate(query);

    assertThat(isValid, is(true));
  }

  @Test
  public void blankKeywordIsInvalid() {
    expected.expect(both(hasResponseCode(Matchers.equalTo((IErrorResponseCode) MISSING_PARAMETER)))
        .and(hasArguments(arrayContaining((Object) KEYWORD))));

    ISuggestionQuery query = createSuggestionQuery(TEST_EMPTY_KEYWORD).build();

    validator.validate(query);
  }
}
