package net.disy.eenvplus.tfes.core.config.data;

import static java.util.Arrays.asList;
import static net.disy.eenvplus.tfes.core.api.capabilities.IDataSourceConfigurationMatcher.hasLanguages;
import static net.disy.eenvplus.tfes.core.api.capabilities.IDataSourceConfigurationMatcher.hasName;
import static net.disy.eenvplus.tfes.core.api.capabilities.IDataSourceConfigurationMatcher.hasRank;
import static net.disy.eenvplus.tfes.core.api.capabilities.IDataSourceConfigurationMatcher.hasUri;
import static net.disy.eenvplus.tfes.core.config.data.DataSourceConfigurationTestDataFactory.DE;
import static net.disy.eenvplus.tfes.core.config.data.DataSourceConfigurationTestDataFactory.EN;
import static net.disy.eenvplus.tfes.core.config.data.DataSourceConfigurationTestDataFactory.THAT_SOURCE_NAME;
import static net.disy.eenvplus.tfes.core.config.data.DataSourceConfigurationTestDataFactory.THAT_SOURCE_RANK;
import static net.disy.eenvplus.tfes.core.config.data.DataSourceConfigurationTestDataFactory.THAT_SOURCE_URI;
import static net.disy.eenvplus.tfes.core.config.data.DataSourceConfigurationTestDataFactory.THAT_TEST_SOURCE;
import static net.disy.eenvplus.tfes.core.config.data.DataSourceConfigurationTestDataFactory.THIS_SOURCE_NAME;
import static net.disy.eenvplus.tfes.core.config.data.DataSourceConfigurationTestDataFactory.THIS_SOURCE_RANK;
import static net.disy.eenvplus.tfes.core.config.data.DataSourceConfigurationTestDataFactory.THIS_TEST_SOURCE;
import static net.disy.eenvplus.tfes.core.config.data.DataSourceConfigurationTestDataFactory.createDataSourceConfiguration;
import static net.disy.eenvplus.tfes.core.config.data.DataSourceConfigurationTestUtilities.TOLERANCE;
import static net.disy.eenvplus.tfes.core.config.data.DataSourceConfigurationTestUtilities.isThatTestSource;
import static net.disy.eenvplus.tfes.core.config.data.DataSourceConfigurationTestUtilities.isThisTestSource;
import static org.hamcrest.Matchers.both;
import static org.hamcrest.Matchers.closeTo;
import static org.hamcrest.Matchers.contains;
import static org.hamcrest.Matchers.containsInAnyOrder;
import static org.hamcrest.Matchers.equalTo;
import static org.junit.Assert.assertThat;

import java.util.Collection;

import net.disy.eenvplus.tfes.core.api.capabilities.IDataSourceConfiguration;

import org.junit.Test;

public class DataSourceConfigurationMergerTest {

  @Test
  public void returnsSingleSource() throws Exception {
    Collection<IDataSourceConfiguration> sources = new DataSourceConfigurationMerger().add(
        asList(THIS_TEST_SOURCE)).getSources();

    assertThat(sources, contains(isThisTestSource()));
  }

  @SuppressWarnings("unchecked")
  @Test
  public void returnsTwoSources() throws Exception {
    Collection<IDataSourceConfiguration> sources = new DataSourceConfigurationMerger().add(
        asList(THIS_TEST_SOURCE, THAT_TEST_SOURCE)).getSources();

    assertThat(sources, containsInAnyOrder(isThisTestSource(), isThatTestSource()));
  }

  @SuppressWarnings("unchecked")
  @Test
  public void joinsTwoDifferentSources() throws Exception {
    Collection<IDataSourceConfiguration> sources = new DataSourceConfigurationMerger()
        .add(asList(THIS_TEST_SOURCE))
        .add(asList(THAT_TEST_SOURCE))
        .getSources();

    assertThat(sources, containsInAnyOrder(isThisTestSource(), isThatTestSource()));
  }

  @Test
  public void joinsLanguagesForSameUri() throws Exception {
    IDataSourceConfiguration anotherSource = createDataSourceConfiguration(
        THAT_SOURCE_NAME,
        THAT_SOURCE_URI,
        asList(DE),
        THAT_SOURCE_RANK);

    Collection<IDataSourceConfiguration> sources = new DataSourceConfigurationMerger().add(
        asList(THAT_TEST_SOURCE, anotherSource)).getSources();

    assertThat(sources, contains(both(hasUri(equalTo(THAT_SOURCE_URI)))//
        .and(hasLanguages(containsInAnyOrder(EN, DE)))));
  }

  @Test
  public void retainsFirstNameForSameUri() throws Exception {
    IDataSourceConfiguration anotherSource = createDataSourceConfiguration(
        THIS_SOURCE_NAME,
        THAT_SOURCE_URI,
        asList(DE),
        THAT_SOURCE_RANK);

    Collection<IDataSourceConfiguration> sources = new DataSourceConfigurationMerger().add(
        asList(THAT_TEST_SOURCE, anotherSource)).getSources();

    assertThat(sources, contains(both(hasUri(equalTo(THAT_SOURCE_URI)))//
        .and(hasName(equalTo(THAT_SOURCE_NAME)))));
  }

  @Test
  public void retainsFirstRankForSameUri() throws Exception {
    IDataSourceConfiguration anotherSource = createDataSourceConfiguration(
        THIS_SOURCE_NAME,
        THAT_SOURCE_URI,
        asList(DE),
        THIS_SOURCE_RANK);

    Collection<IDataSourceConfiguration> sources = new DataSourceConfigurationMerger().add(
        asList(THAT_TEST_SOURCE, anotherSource)).getSources();

    assertThat(sources, contains(both(hasUri(equalTo(THAT_SOURCE_URI)))//
        .and(hasRank(closeTo(THAT_SOURCE_RANK, TOLERANCE)))));
  }

}
