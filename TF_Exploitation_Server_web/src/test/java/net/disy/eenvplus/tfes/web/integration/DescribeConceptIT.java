//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.web.integration;

import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.CONCEPT;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.CROSS_WALKING;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.SOURCE;
import static org.hamcrest.Matchers.containsInAnyOrder;
import static org.hamcrest.Matchers.everyItem;
import static org.hamcrest.Matchers.is;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

// NOT_PUBLISHED
@RunWith(SpringJUnit4ClassRunner.class)
@WebAppConfiguration
@ContextConfiguration("testApplicationContext.xml")
@ActiveProfiles("integration-test")
@SuppressWarnings("nls")
public class DescribeConceptIT {

  private static final String URI_CONCEPT_SOIL = "http://linkeddata.ge.imati.cnr.it/resource/INSPIREThemeRegister/so";
  private static final String CONTENT_TYPE = "application/json;charset=UTF-8";

  @Autowired
  private WebApplicationContext context;

  private MockMvc mockMvc;

  @Value("${rest.describe.concept.path}")
  private String path;

  @Before
  public void createMockMvc() {
    mockMvc = MockMvcBuilders.webAppContextSetup(context).build();
  }

  @Test
  public void head() throws Exception {
    mockMvc
        .perform(describeConcept().param(CONCEPT, URI_CONCEPT_SOIL))
        .andExpect(status().isOk())
        .andExpect(content().contentType(CONTENT_TYPE))
        .andExpect(jsonPath("$head").exists())
        .andExpect(jsonPath("$head.vars", containsInAnyOrder("concept", "p", "o")));
  }

  @Test
  public void conceptIsSubject() throws Exception {
    mockMvc
        .perform(describeConcept().param(CONCEPT, URI_CONCEPT_SOIL))
        .andExpect(content().contentType(CONTENT_TYPE))
        .andExpect(jsonPath("$results.bindings[*].s.type", everyItem(is("uri"))))
        .andExpect(jsonPath("$results.bindings[*].s.value", everyItem(is(URI_CONCEPT_SOIL))));
  }

  @Test
  public void predicateIsUri() throws Exception {
    mockMvc
        .perform(describeConcept().param(CONCEPT, URI_CONCEPT_SOIL))
        .andExpect(status().isOk())
        .andExpect(content().contentType(CONTENT_TYPE))
        .andExpect(jsonPath("$results.bindings[*].p.type", everyItem(is("uri"))));
  }

  @Test
  public void sourceIsInResultUri() throws Exception {
    mockMvc
        .perform(describeConcept().param(CONCEPT, URI_CONCEPT_SOIL).param(SOURCE, "true"))
        .andExpect(status().isOk())
        .andExpect(content().contentType(CONTENT_TYPE))
        .andExpect(jsonPath("$head.vars", containsInAnyOrder("concept", "p", "o", "source")))
        .andExpect(jsonPath("$results.bindings[*].source.type", everyItem(is("literal"))))
        .andExpect(
            jsonPath("$results.bindings[*].source.value", everyItem(is("INSPIRE theme register"))));
  }

  @Test
  public void crosswalking() throws Exception {
    mockMvc
        .perform(describeConcept().param(CONCEPT, URI_CONCEPT_SOIL).param(CROSS_WALKING, "true"))
        .andExpect(status().isOk())
        .andExpect(content().contentType(CONTENT_TYPE))
        .andExpect(jsonPath("$head.vars", containsInAnyOrder("concept", "p", "o")));
  }

  @Test
  public void crosswalkingSource() throws Exception {
    mockMvc
        .perform(
            describeConcept()
                .param(CONCEPT, URI_CONCEPT_SOIL)
                .param(CROSS_WALKING, "true")
                .param(SOURCE, "true"))
        .andDo(MockMvcResultHandlers.print())
        .andExpect(status().isOk())
        .andExpect(content().contentType(CONTENT_TYPE))
        .andExpect(jsonPath("$head.vars", containsInAnyOrder("concept", "p", "o", "source")));
  }

  private MockHttpServletRequestBuilder describeConcept() {
    return MockMvcRequestBuilders.get("/" + path);
  }

}
