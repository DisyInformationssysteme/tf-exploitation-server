package net.disy.eenvplus.tfes.core.module;

import static java.util.Arrays.asList;
import static net.disy.eenvplus.tfes.core.api.response.ILabelledConceptMatcher.hasConceptUri;
import static net.disy.eenvplus.tfes.core.api.response.ILabelledConceptMatcher.hasLanguage;
import static net.disy.eenvplus.tfes.core.api.response.ILabelledConceptMatcher.hasTitle;
import static net.disy.eenvplus.tfes.core.api.response.ITopMostConceptMatcher.hasConceptScheme;
import static net.disy.eenvplus.tfes.core.api.response.ITopMostConceptMatcher.hasKeywords;
import static org.apache.commons.lang3.StringUtils.EMPTY;
import static org.hamcrest.Matchers.allOf;
import static org.hamcrest.Matchers.both;
import static org.hamcrest.Matchers.contains;
import static org.hamcrest.Matchers.containsInAnyOrder;
import static org.hamcrest.Matchers.emptyCollectionOf;
import static org.hamcrest.Matchers.equalTo;
import static org.junit.Assert.assertThat;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import net.disy.eenvplus.tfes.core.api.response.ILabelledConcept;
import net.disy.eenvplus.tfes.core.api.response.ITopMostConcept;

import org.junit.Test;

@SuppressWarnings("nls")
public class TopMostConceptAggregatorTest {

  private TopMostConceptAggregator aggregator = new TopMostConceptAggregator();

  @Test
  public void empty() throws Exception {
    Collection<ITopMostConcept> aggregated = aggregator.aggregate(Collections
        .<ITopMostConcept> emptyList());

    assertThat(aggregated, emptyCollectionOf(ITopMostConcept.class));
  }

  @Test
  public void singleItemWithSingleKeyword() throws Exception {
    ITopMostConcept topMostConcept = createTopMostConcept(
        createConcept("concept", "en-US", "test/concept"),
        asList(createConcept("keyword", "en", "test/keyword")));

    List<ITopMostConcept> aggregated = new ArrayList<>(aggregator.aggregate(asList(topMostConcept)));

    assertThat(
        aggregated,
        contains(both(
            hasConceptScheme(allOf(
                hasTitle(equalTo("concept")),
                hasLanguage(equalTo("en-US")),
                hasConceptUri(equalTo("test/concept"))))).and(
            hasKeywords(contains(allOf(
                hasTitle(equalTo("keyword")),
                hasLanguage(equalTo("en")),
                hasConceptUri(equalTo("test/keyword"))))))));
  }

  @SuppressWarnings("unchecked")
  @Test
  public void singleItemWithTwoKeywords() throws Exception {
    ITopMostConcept topMostConcept = createTopMostConcept(
        createConcept("concept", "en-US", "test/concept"),
        asList(
            createConcept("keyword", "en", "test/keyword"),
            createConcept("other", "en", "test/other")));

    List<ITopMostConcept> aggregated = new ArrayList<>(aggregator.aggregate(asList(topMostConcept)));

    assertThat(
        aggregated,
        contains(both(
            hasConceptScheme(allOf(
                hasTitle(equalTo("concept")),
                hasLanguage(equalTo("en-US")),
                hasConceptUri(equalTo("test/concept"))))).and(
            hasKeywords(containsInAnyOrder(
                allOf(
                    hasTitle(equalTo("keyword")),
                    hasLanguage(equalTo("en")),
                    hasConceptUri(equalTo("test/keyword"))),
                allOf(
                    hasTitle(equalTo("other")),
                    hasLanguage(equalTo("en")),
                    hasConceptUri(equalTo("test/other"))))))));
  }

  @SuppressWarnings("unchecked")
  @Test
  public void twoItemsWithDifferentConcept() throws Exception {
    ITopMostConcept topMostConcept = createTopMostConcept(
        createConcept("concept", "en-US", "test/concept"),
        asList(createConcept("keyword", "en", "test/keyword")));
    ITopMostConcept otherConcept = createTopMostConcept(
        createConcept("other", "en-US", "other/concept"),
        asList(createConcept("other", "en", "other/keyword")));

    List<ITopMostConcept> aggregated = new ArrayList<>(aggregator.aggregate(asList(
        topMostConcept,
        otherConcept)));

    assertThat(
        aggregated,
        containsInAnyOrder(
            both(
                hasConceptScheme(allOf(
                    hasTitle(equalTo("concept")),
                    hasLanguage(equalTo("en-US")),
                    hasConceptUri(equalTo("test/concept"))))).and(
                hasKeywords(contains(allOf(
                    hasTitle(equalTo("keyword")),
                    hasLanguage(equalTo("en")),
                    hasConceptUri(equalTo("test/keyword")))))),
            both(
                hasConceptScheme(allOf(
                    hasTitle(equalTo("other")),
                    hasLanguage(equalTo("en-US")),
                    hasConceptUri(equalTo("other/concept"))))).and(
                hasKeywords(contains(allOf(
                    hasTitle(equalTo("other")),
                    hasLanguage(equalTo("en")),
                    hasConceptUri(equalTo("other/keyword"))))))));
  }

  @SuppressWarnings("unchecked")
  @Test
  public void twoItemsWithSameConcept() throws Exception {
    ILabelledConcept concept = createConcept("concept", "en-US", "test/concept");
    ITopMostConcept topMostConcept = createTopMostConcept(
        concept,
        asList(createConcept("keyword", "en", "test/keyword")));
    ITopMostConcept otherConcept = createTopMostConcept(
        concept,
        asList(createConcept("other", "en", "other/keyword")));

    List<ITopMostConcept> aggregated = new ArrayList<>(aggregator.aggregate(asList(
        topMostConcept,
        otherConcept)));

    assertThat(
        aggregated,
        contains(both(
            hasConceptScheme(allOf(
                hasTitle(equalTo("concept")),
                hasLanguage(equalTo("en-US")),
                hasConceptUri(equalTo("test/concept"))))).and(
            hasKeywords(containsInAnyOrder(
                allOf(
                    hasTitle(equalTo("keyword")),
                    hasLanguage(equalTo("en")),
                    hasConceptUri(equalTo("test/keyword"))),
                allOf(
                    hasTitle(equalTo("other")),
                    hasLanguage(equalTo("en")),
                    hasConceptUri(equalTo("other/keyword"))))))));
  }

  private ILabelledConcept createConcept(final String title, final String language, final String uri) {
    return new ILabelledConcept() {

      @Override
      public String getLabel() {
        return title;
      }

      @Override
      public String getLanguage() {
        return language;
      }

      @Override
      public String getConceptUri() {
        return uri;
      }

      @Override
      public String getSourceLabel() {
        return EMPTY;
      }
    };
  }

  private ITopMostConcept createTopMostConcept(
      final ILabelledConcept scheme,
      final Collection<ILabelledConcept> keywords) {
    return new ITopMostConcept() {

      @Override
      public Collection<ILabelledConcept> getKeywords() {
        return keywords;
      }

      @Override
      public ILabelledConcept getConceptScheme() {
        return scheme;
      }
    };
  }

}
