//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.modules.sparql.expression;

import static net.disy.eenvplus.tfes.modules.sparql.expression.SparqlExpressionBuilder.use;
import static org.springframework.util.CollectionUtils.isEmpty;

import java.util.Iterator;
import java.util.List;

import com.hp.hpl.jena.graph.Node;
import com.hp.hpl.jena.sparql.expr.E_IsLiteral;
import com.hp.hpl.jena.sparql.expr.E_LogicalNot;
import com.hp.hpl.jena.sparql.expr.Expr;
import com.hp.hpl.jena.sparql.expr.ExprVar;
import com.hp.hpl.jena.sparql.expr.NodeValue;

// NOT_PUBLISHED
public class SparqlExpressionFactory {

  private SparqlExpressionFactory() {
  }

  public static Expr createMultipleOptionsExpression(
      IParametrizedSparqlExpression<String> singleExpression,
      List<String> options) {
    if (isEmpty(options)) {
      return NodeValue.TRUE;
    }
    Iterator<String> iterator = options.iterator();
    SparqlExpressionBuilder builder = use(singleExpression.create(iterator.next()));
    while (iterator.hasNext()) {
      final Expr current = singleExpression.create(iterator.next());
      builder.or(current);
    }
    return builder.toExpr();
  }

  public static Expr createIsLiteralExpression(Node node) {
    return new E_IsLiteral(new ExprVar(node));
  }

  public static Expr not(Expr expression) {
    return new E_LogicalNot(expression);
  }

}
