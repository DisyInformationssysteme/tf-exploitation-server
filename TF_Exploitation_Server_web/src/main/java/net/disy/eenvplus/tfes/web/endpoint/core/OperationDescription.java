//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.web.endpoint.core;

import static org.apache.commons.lang3.StringUtils.EMPTY;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import net.disy.eenvplus.tfes.core.api.capabilities.ParameterDescription;
import net.disy.eenvplus.tfes.core.api.capabilities.ServiceModuleDescription;

import org.springframework.web.bind.annotation.RequestMethod;

// NOT_PUBLISHED
public class OperationDescription {

  private final String type;
  private final String onlineResource;
  private final RequestMethod method;
  private final List<RestEndpointDescription> endpointDescriptions;

  public OperationDescription(
      String type,
      String onlineResource,
      RequestMethod method,
      List<RestEndpointDescription> endpointDescriptions) {
    this.type = type;
    this.onlineResource = onlineResource;
    this.method = method;
    this.endpointDescriptions = endpointDescriptions;
  }

  public String getType() {
    return type;
  }

  public String getOnlineResource() {
    return onlineResource;
  }

  public RequestMethod getMethod() {
    return method;
  }

  public List<RestEndpointDescription> getEndpointDescriptions() {
    return endpointDescriptions;
  }

  public static class Builder {
    private String type;
    private String onlineResource;
    private RequestMethod method;
    private List<ParameterDescription> commonParameters = new ArrayList<>();
    private List<ServiceModuleDescription> serviceModules = Collections.emptyList();;

    private Builder(String type, String onlineResource) {
      this.type = type;
      this.onlineResource = onlineResource;
    }

    public static Builder createDescriptionFor(String type, String onlineResource) {
      return new Builder(type, onlineResource);
    }

    public Builder withRequestMethod(RequestMethod method) {
      this.method = method;
      return this;
    }

    public Builder withServiceModules(List<ServiceModuleDescription> serviceModules) {
      this.serviceModules = serviceModules;
      return this;
    }

    public Builder withStringParameter(String parameter) {
      commonParameters.add(new ParameterDescription(parameter, "string", EMPTY)); //$NON-NLS-1$
      return this;
    }

    public Builder withIntegerParameter(String parameter) {
      commonParameters.add(new ParameterDescription(parameter, "integer", 0)); //$NON-NLS-1$
      return this;
    }

    public Builder withBooleanParameter(String parameter) {
      commonParameters.add(new ParameterDescription(parameter, "boolean", false)); //$NON-NLS-1$
      return this;
    }

    public OperationDescription build() {
      return new OperationDescription(type, onlineResource, method, createEndpointDescriptions());
    }

    private List<RestEndpointDescription> createEndpointDescriptions() {
      List<RestEndpointDescription> result = new ArrayList<>(serviceModules.size());
      for (ServiceModuleDescription currentModule : serviceModules) {
        RestEndpointDescription restEndpointDescription = createDescriptionFor(currentModule);
        result.add(restEndpointDescription);
      }
      return result;
    }

    private RestEndpointDescription createDescriptionFor(ServiceModuleDescription currentModule) {
      return new RestEndpointDescription(
          currentModule.getServiceId(),
          commonParameters,
          currentModule.getExtraParameters());
    }
  }
}
