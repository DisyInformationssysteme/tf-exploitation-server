//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.modules.keyword.completion;

import static java.util.Collections.emptyList;
import static net.disy.eenvplus.tfes.modules.keyword.completion.SuggestionSparqlQueryBuilder.createSuggestionQuery;
import static net.disy.eenvplus.tfes.modules.keyword.completion.SuggestionSparqlResultSetMapper.create;

import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import net.disy.eenvplus.tfes.core.api.capabilities.ParameterDescription;
import net.disy.eenvplus.tfes.core.api.capabilities.ServiceModuleDescription;
import net.disy.eenvplus.tfes.core.api.modules.ISuggestionProviderServiceModule;
import net.disy.eenvplus.tfes.core.api.query.ISuggestionQuery;
import net.disy.eenvplus.tfes.core.api.response.ISuggestion;
import net.disy.eenvplus.tfes.modules.core.ISparqlConnector;

import org.springframework.beans.factory.annotation.Autowired;

import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.query.ResultSet;

// NOT_PUBLISHED
public class KeywordCompletionModule implements ISuggestionProviderServiceModule {

  static final String SOURCE_LABEL = "source_label"; //$NON-NLS-1$

  @Autowired
  private ISparqlConnector sparqlConnector;

  @Override
  public ServiceModuleDescription getDescription() {
    List<ParameterDescription> parameterDescriptions = Collections.emptyList();
    return new ServiceModuleDescription("Keyword Completion Module", parameterDescriptions); //$NON-NLS-1$
  }

  @Override
  public Callable<Collection<ISuggestion>> getSuggestions(final ISuggestionQuery query) {
    return new Callable<Collection<ISuggestion>>() {

      @Override
      public Collection<ISuggestion> call() throws Exception {
        if (query.isCrossWalkingActive()) {
          return emptyList();
        }

        Query sparqlQuery = createSuggestionQuery(query.getKeyword(), SOURCE_LABEL)
            .withLanguages(query.getLanguages())
            .withLimit(query.getMaxCount())
            .withSchemas(query.getThesauri())
            .withSource(query.isSourceActive())
            .build();
        ResultSet resultSet = sparqlConnector.executeSparqlQuery(sparqlQuery);
        return create(SOURCE_LABEL).map(resultSet);
      }

    };
  }
}
