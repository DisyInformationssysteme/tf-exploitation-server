package net.disy.eenvplus.tfes.web.validation.impl;

import static java.util.Arrays.asList;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.MAX_COUNT;
import static net.disy.eenvplus.tfes.web.api.exceptions.ErrorResponseCodes.SYNTAX_ERROR;
import static net.disy.eenvplus.tfes.web.api.exceptions.ErrorResponseCodes.UNKNOWN_SERVICE;
import static net.disy.eenvplus.tfes.web.api.exceptions.ErrorResponseCodes.UNKNOWN_THESAURI;
import static net.disy.eenvplus.tfes.web.endpoint.core.IllegalQueryArgumentExceptionMatcher.hasArguments;
import static net.disy.eenvplus.tfes.web.endpoint.core.IllegalQueryArgumentExceptionMatcher.hasResponseCode;
import static net.disy.eenvplus.tfes.web.endpoint.query.ServiceQueryBuilder.createEmptyQuery;
import static org.hamcrest.Matchers.arrayContaining;
import static org.hamcrest.Matchers.both;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.is;
import static org.junit.Assert.assertThat;
import static org.mockito.Mockito.when;

import java.util.List;

import net.disy.eenvplus.tfes.core.api.capabilities.IDataSourceConfiguration;
import net.disy.eenvplus.tfes.core.api.capabilities.ParameterDescription;
import net.disy.eenvplus.tfes.core.api.capabilities.ServiceModuleDescription;
import net.disy.eenvplus.tfes.core.api.query.IServiceQuery;
import net.disy.eenvplus.tfes.core.api.query.ISuggestionQuery;
import net.disy.eenvplus.tfes.web.api.exceptions.ErrorResponseCodes;
import net.disy.eenvplus.tfes.web.api.exceptions.IErrorResponseCode;
import net.disy.eenvplus.tfes.web.endpoint.core.IllegalQueryArgumentException;
import net.disy.eenvplus.tfes.web.validation.api.IServiceQueryValidator;
import net.disy.eenvplus.tfes.web.validation.impl.AbstractServiceQueryValidator;

import org.hamcrest.Matchers;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.mockito.Mockito;

@SuppressWarnings("nls")
public class AbstractServiceQueryValidatorTest {

  private static final String KNOWN_THESAURUS = "KnownThesaurus";
  private static final String OTHER_THESAURUS = "OtherThesaurus";
  private static final String UNKNOWN_THESAURUS = "UnknownThesaurus";
  private static final String KNOWN_LANGUAGE = "KnownLanguage";
  private static final String OTHER_LANGUAGE = "OtherLanguage";
  private static final String UNKNOWN_LANGUAGE = "UnknownLanguage";
  private static final String KNOWN_SERVICE_MODULE = "KnownServiceModule";
  private static final String UNKNOWN_SERVICE_MODULE = "UnknownServiceModule";
  private static final String KNOWN_PARAMETER_KEY = "KnownParameterKey";
  private static final Object KNOWN_PARAMETER_VALUE = new Object();
  private static final String UNKNOWN_PARAMETER_KEY = "UnknownParameterKey";
  private static final Object UNKNOWN_PARAMETER_VALUE = new Object();

  @Rule
  public ExpectedException thrown = ExpectedException.none();

  private IServiceQueryValidator<IServiceQuery> validator = new AbstractServiceQueryValidator<IServiceQuery>() {

    @Override
    protected List<IDataSourceConfiguration> getDataSources() {
      IDataSourceConfiguration knownThesaurus = createThesaurus(
          KNOWN_THESAURUS,
          KNOWN_LANGUAGE,
          OTHER_LANGUAGE);
      IDataSourceConfiguration otherThesaurus = createThesaurus(OTHER_THESAURUS, OTHER_LANGUAGE);
      return asList(knownThesaurus, otherThesaurus);
    }

    @Override
    protected List<ServiceModuleDescription> getServiceModules() {
      return asList(new ServiceModuleDescription(
          KNOWN_SERVICE_MODULE,
          asList(new ParameterDescription(KNOWN_PARAMETER_KEY, "Object", KNOWN_PARAMETER_VALUE))));
    }

    @Override
    protected boolean validateCustomFields(IServiceQuery query)
        throws IllegalQueryArgumentException {
      return true;
    }
  };

  private IDataSourceConfiguration createThesaurus(String onlineResource, String... languages) {
    IDataSourceConfiguration thesaurus = Mockito.mock(IDataSourceConfiguration.class);
    when(thesaurus.getOnlineResource()).thenReturn(onlineResource);
    when(thesaurus.getLanguages()).thenReturn(asList(languages));
    return thesaurus;
  }

  @Before
  public void initServiceManager() {

  }

  @Test
  public void zeroMaxCountIsValid() throws Exception {
    IServiceQuery query = createEmptyQuery().withMaxCount(0).build();

    boolean isValid = validator.validate(query);

    assertThat(isValid, is(true));
  }

  @Test
  public void positiveMaxCountIsValid() throws Exception {
    IServiceQuery query = createEmptyQuery().withMaxCount(1).build();

    boolean isValid = validator.validate(query);

    assertThat(isValid, is(true));
  }

  @Test
  public void negativeMaxCountIsInvalid() throws Exception {
    thrown.expect(both(hasResponseCode(equalTo((IErrorResponseCode) SYNTAX_ERROR))).and(
        hasArguments(arrayContaining((Object) MAX_COUNT))));

    ISuggestionQuery query = createEmptyQuery().withMaxCount(-1).build();

    boolean isValid = validator.validate(query);

    assertThat(isValid, is(false));
  }

  @Test
  public void knownThesaurusIsValid() throws Exception {
    ISuggestionQuery query = createEmptyQuery().withThesauri(KNOWN_THESAURUS).build();

    boolean isValid = validator.validate(query);

    assertThat(isValid, is(true));
  }

  @Test
  public void unknownThesaurusIsInvalid() throws Exception {
    thrown.expect(both(hasResponseCode(equalTo((IErrorResponseCode) UNKNOWN_THESAURI))) //
        .and(hasArguments(arrayContaining((Object) UNKNOWN_THESAURUS))));

    ISuggestionQuery query = createEmptyQuery().withThesauri(UNKNOWN_THESAURUS).build();

    boolean isValid = validator.validate(query);

    assertThat(isValid, is(false));
  }

  @Test
  public void knownLanguageIsValid() throws Exception {
    ISuggestionQuery query = createEmptyQuery().withLanguages(KNOWN_LANGUAGE).build();

    boolean isValid = validator.validate(query);

    assertThat(isValid, is(true));
  }

  @Test
  public void unknownLanguageIsInvalid() throws Exception {
    thrown
        .expect(both(
            hasResponseCode(Matchers
                .equalTo((IErrorResponseCode) ErrorResponseCodes.UNKNOWN_LANGUAGE))).and(
            hasArguments(arrayContaining((Object) UNKNOWN_LANGUAGE))));

    ISuggestionQuery query = createEmptyQuery().withLanguages(UNKNOWN_LANGUAGE).build();

    boolean isValid = validator.validate(query);

    assertThat(isValid, is(false));
  }

  @Test
  public void knownLanguageOfSelectedThesaurusIsValid() throws Exception {
    ISuggestionQuery query = createEmptyQuery()
        .withLanguages(KNOWN_LANGUAGE)
        .withThesauri(KNOWN_THESAURUS)
        .build();

    boolean isValid = validator.validate(query);

    assertThat(isValid, is(true));
  }

  @Test
  public void knownLanguageOfUnselectedThesaurusIsInvalid() throws Exception {
    thrown.expect(both(
        hasResponseCode(equalTo((IErrorResponseCode) ErrorResponseCodes.UNKNOWN_LANGUAGE))).and(
        hasArguments(arrayContaining((Object) KNOWN_LANGUAGE))));

    ISuggestionQuery query = createEmptyQuery()
        .withLanguages(KNOWN_LANGUAGE)
        .withThesauri(OTHER_THESAURUS)
        .build();

    boolean isValid = validator.validate(query);

    assertThat(isValid, is(true));
  }

  @Test
  public void knownServiceIsValid() throws Exception {
    ISuggestionQuery query = createEmptyQuery().withServiceModules(KNOWN_SERVICE_MODULE).build();

    boolean isValid = validator.validate(query);

    assertThat(isValid, is(true));
  }

  @Test
  public void unknownServiceIsInvalid() throws Exception {
    thrown.expect(both(hasResponseCode(equalTo((IErrorResponseCode) UNKNOWN_SERVICE))) //
        .and(hasArguments(arrayContaining((Object) UNKNOWN_SERVICE_MODULE))));

    ISuggestionQuery query = createEmptyQuery().withServiceModules(UNKNOWN_SERVICE_MODULE).build();

    boolean isValid = validator.validate(query);

    assertThat(isValid, is(false));
  }

  @Test
  public void knownParameterIsValid() throws Exception {
    ISuggestionQuery query = createEmptyQuery().withExtraParameters(
        KNOWN_PARAMETER_KEY + ":" + KNOWN_PARAMETER_VALUE).build();

    boolean isValid = validator.validate(query);

    assertThat(isValid, is(true));
  }

  @Test
  public void unknownParameterIsInvalid() throws Exception {
    thrown.expect(both(hasResponseCode(equalTo((IErrorResponseCode) SYNTAX_ERROR))) //
        .and(hasArguments(arrayContaining((Object) UNKNOWN_PARAMETER_KEY))));

    ISuggestionQuery query = createEmptyQuery().withExtraParameters(
        UNKNOWN_PARAMETER_KEY + ":" + UNKNOWN_PARAMETER_VALUE).build();

    boolean isValid = validator.validate(query);

    assertThat(isValid, is(false));
  }

}
