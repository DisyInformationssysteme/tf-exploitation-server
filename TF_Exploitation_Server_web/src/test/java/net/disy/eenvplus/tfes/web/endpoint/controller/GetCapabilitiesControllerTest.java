package net.disy.eenvplus.tfes.web.endpoint.controller;

import static net.disy.eenvplus.tfes.web.endpoint.controller.GetCapabilitiesController.REST_CAPABILITIES_PATH;
import static org.apache.commons.lang3.StringUtils.EMPTY;
import static org.hamcrest.Matchers.contains;
import static org.hamcrest.Matchers.containsInAnyOrder;
import static org.hamcrest.Matchers.equalToIgnoringWhiteSpace;
import static org.junit.Assert.assertThat;
import static org.mockito.Mockito.when;

import java.util.Arrays;
import java.util.List;

import net.disy.eenvplus.tfes.core.api.capabilities.IDataSourceConfiguration;
import net.disy.eenvplus.tfes.core.api.service.IDataSourceProvider;
import net.disy.eenvplus.tfes.core.api.service.IServiceManager;
import net.disy.eenvplus.tfes.web.api.rest.DataSourceMatcher;
import net.disy.eenvplus.tfes.web.api.rest.OperationMatcher;
import net.disy.eenvplus.tfes.web.api.rest.RestApiExploitationCapabilities;
import net.disy.eenvplus.tfes.web.api.rest.RestApiServiceMetadata;
import net.disy.eenvplus.tfes.web.api.rest.ServiceMetadataMatcher;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.springframework.core.env.Environment;

@RunWith(MockitoJUnitRunner.class)
public class GetCapabilitiesControllerTest {

  private static final String TEST_PATH = "/test/path"; //$NON-NLS-1$
  private static final RestApiServiceMetadata TEST_METADATA;
  private static final String TEST_METADATA_NAME = "Test Metadata Name"; //$NON-NLS-1$
  private static final List<IDataSourceConfiguration> TEST_DATA_SOURCES;
  private static final String TEST_DATA_SOURCE_NAME = "Test Data Source Name"; //$NON-NLS-1$
  private static final String TEST_LANGUAGE_1 = "en"; //$NON-NLS-1$
  private static final String TEST_LANGUAGE_2 = "de"; //$NON-NLS-1$

  static {
    TEST_METADATA = new RestApiServiceMetadata();
    TEST_METADATA.setName(TEST_METADATA_NAME);

    IDataSourceConfiguration dataSourceConfiguration = new IDataSourceConfiguration() {

      @Override
      public String getName() {
        return TEST_DATA_SOURCE_NAME;
      }

      @Override
      public String getOnlineResource() {
        return EMPTY;
      }

      @Override
      public List<String> getLanguages() {
        return Arrays.asList(TEST_LANGUAGE_1, TEST_LANGUAGE_2);
      }

      @Override
      public double getRank() {
        return 0.0;
      }
    };
    TEST_DATA_SOURCES = Arrays.asList(dataSourceConfiguration);
  }

  @Mock
  private IServiceManager serviceManager;

  @Mock
  private IDataSourceProvider dataSourceProvider;

  @Mock
  private ServiceMetadataFactory serviceMetadataFactory;

  @Mock
  private Environment environment;

  @InjectMocks
  private GetCapabilitiesController capabilitiesController;

  @Before
  public void setUp() {
    when(serviceMetadataFactory.create()).thenReturn(TEST_METADATA);
    when(environment.getProperty(REST_CAPABILITIES_PATH)).thenReturn(TEST_PATH);
    capabilitiesController.insertOwnOperationDescription();
    capabilitiesController.minRank = 0.0;
    capabilitiesController.maxRank = 100.0;
  }

  @Test
  public void hasMetadataName() {
    RestApiExploitationCapabilities capabilities = capabilitiesController.getCapabilities();

    assertThat(
        capabilities.getService(),
        ServiceMetadataMatcher.hasName(equalToIgnoringWhiteSpace(TEST_METADATA_NAME)));
  }

  @Test
  public void hasDataSourceConfig() {
    when(dataSourceProvider.getSources()).thenReturn(TEST_DATA_SOURCES);
    RestApiExploitationCapabilities capabilities = capabilitiesController.getCapabilities();

    assertThat(
        capabilities.getDataSources(),
        contains(DataSourceMatcher.hasName(equalToIgnoringWhiteSpace(TEST_DATA_SOURCE_NAME))));

    assertThat(
        capabilities.getDataSources(),
        contains(DataSourceMatcher
            .hasLanguages(containsInAnyOrder(TEST_LANGUAGE_1, TEST_LANGUAGE_2))));
  }

  @Test
  public void hasSelfOperation() {
    RestApiExploitationCapabilities capabilities = capabilitiesController.getCapabilities();

    assertThat(
        capabilities.getOperations(),
        contains(OperationMatcher.hasType(equalToIgnoringWhiteSpace(TEST_PATH))));
  }

}
