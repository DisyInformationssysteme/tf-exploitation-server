//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.core.module;

import static net.disy.eenvplus.tfes.core.util.CollectionUtilities.flatten;
import static net.disy.eenvplus.tfes.core.util.CollectionUtilities.limitResults;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import java.util.concurrent.Callable;
import java.util.concurrent.Future;

import net.disy.eenvplus.tfes.core.api.exceptions.ServiceException;
import net.disy.eenvplus.tfes.core.api.modules.ISynonymProviderServiceModule;
import net.disy.eenvplus.tfes.core.api.query.ISynonymQuery;
import net.disy.eenvplus.tfes.core.api.response.ISynonym;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

// NOT_PUBLISHED
@Service
public class SynonymModulesManager
    extends
    AbstractModuleManager<ISynonymProviderServiceModule, ISynonymQuery, Collection<ISynonym>> {

  @Autowired(required = false)
  List<ISynonymProviderServiceModule> synonymModules = new ArrayList<>();

  @Override
  protected List<ISynonymProviderServiceModule> getServiceModules() {
    return synonymModules;
  }

  @Override
  protected Callable<Collection<ISynonym>> createCallable(
      ISynonymQuery query,
      ISynonymProviderServiceModule module) {
    return module.getSynonyms(query);
  }

  public Collection<ISynonym> getSynonym(ISynonymQuery query) throws ServiceException {
    Set<Future<Collection<ISynonym>>> futures = submitQuery(query);
    Collection<Collection<ISynonym>> moduleResults = retrieveResults(futures);
    List<ISynonym> mergedResults = flatten(moduleResults);

    return limitResults(mergedResults, query.getMaxCount());
  }

}
