//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.web.endpoint.controller;

import static net.disy.eenvplus.tfes.web.api.exceptions.ErrorResponseCodes.SYNTAX_ERROR;
import static org.apache.commons.lang3.StringUtils.isBlank;

import java.net.URI;
import java.net.URISyntaxException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.disy.eenvplus.tfes.core.api.exceptions.ServiceException;
import net.disy.eenvplus.tfes.core.api.service.IDataSourceProvider;
import net.disy.eenvplus.tfes.web.api.rest.RestApiErrorMessage;
import net.disy.eenvplus.tfes.web.endpoint.core.ISelfDescribingOperation;
import net.disy.eenvplus.tfes.web.endpoint.core.OperationDescription;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

// NOT_PUBLISHED

@RestController
public class ForwardSparqlController implements ISelfDescribingOperation {

  private static final String PATH_FORWARD_SPARQL = "rest.forward.sparql.path"; //$NON-NLS-1$

  @Autowired
  private IDataSourceProvider dataSourceProvider;

  @Autowired
  private Environment environment;

  @Override
  public OperationDescription getOperationDescription() {
    return OperationDescription.Builder
        .createDescriptionFor(
            environment.getProperty(PATH_FORWARD_SPARQL),
            environment.getProperty(PATH_FORWARD_SPARQL))
        .withRequestMethod(RequestMethod.GET)
        .build();
  }

  @RequestMapping("${rest.forward.sparql.path}")
  public ResponseEntity<String> proxySparql(
      HttpMethod method,
      @RequestBody String body,
      @RequestHeader HttpHeaders headers,
      HttpServletRequest request,
      HttpServletResponse response) throws ServiceException, URISyntaxException {
    try {
      URI uri = new URI(createRedirectUrl(
          dataSourceProvider.getSparqlEndpointUrl(),
          request.getQueryString()));
      return new RestTemplate().exchange(
          uri,
          method,
          new HttpEntity<String>(body, headers),
          String.class);
    }
    catch (URISyntaxException uriException) {
      throw uriException;
    }
    catch (HttpClientErrorException clientError) {
      throw clientError;
    }
    catch (Exception exception) {
      throw new ServiceException(exception);
    }
  }

  private String createRedirectUrl(String url, String queryString) {
    return isBlank(queryString) ? url : compose(url, queryString);
  }

  private String compose(String url, String queryString) {
    StringBuilder builder = new StringBuilder(url);
    builder.append("?"); //$NON-NLS-1$
    builder.append(queryString);
    return builder.toString();
  }

  @ExceptionHandler
  public ResponseEntity<RestApiErrorMessage> handleURISyntaxException(URISyntaxException exception) {
    new RestApiErrorMessage();
    RestApiErrorMessage message = new RestApiErrorMessage();
    message.setText(SYNTAX_ERROR.createText() + ":\n" + exception.getLocalizedMessage()); //$NON-NLS-1$
    message.setCode(SYNTAX_ERROR.getCode());
    return new ResponseEntity<RestApiErrorMessage>(message, SYNTAX_ERROR.getHttpStatus());
  }

  @ExceptionHandler
  public ResponseEntity<RestApiErrorMessage> handleClientErrorException(
      HttpClientErrorException exception) {
    new RestApiErrorMessage();
    RestApiErrorMessage message = new RestApiErrorMessage();
    message.setText(exception.getResponseBodyAsString());
    message.setCode(SYNTAX_ERROR.getCode());
    return new ResponseEntity<RestApiErrorMessage>(message, exception.getStatusCode());
  }

}
