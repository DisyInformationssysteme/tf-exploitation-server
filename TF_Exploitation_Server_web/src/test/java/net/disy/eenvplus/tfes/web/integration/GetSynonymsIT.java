//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.web.integration;

import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.CONCEPT;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.CROSS_WALKING;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.LANGUAGES;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.MAX_COUNT;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.SERVICE;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.SOURCE;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.THESAURI;
import static org.hamcrest.Matchers.both;
import static org.hamcrest.Matchers.either;
import static org.hamcrest.Matchers.empty;
import static org.hamcrest.Matchers.everyItem;
import static org.hamcrest.Matchers.hasItem;
import static org.hamcrest.Matchers.hasItems;
import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.Matchers.is;
import static org.hamcrest.Matchers.not;
import static org.hamcrest.Matchers.startsWith;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

// NOT_PUBLISHED
@RunWith(SpringJUnit4ClassRunner.class)
@WebAppConfiguration
@ContextConfiguration("testApplicationContext.xml")
@ActiveProfiles("integration-test")
@SuppressWarnings("nls")
public class GetSynonymsIT {

  private static final String URI_CONCEPT_SOIL = "http://linkeddata.ge.imati.cnr.it/resource/INSPIREThemeRegister/so";
  private static final String URI_CONCEPT_REGULATIONS = "http://www.eionet.europa.eu/gemet/concept/11433";

  private static final String CONTENT_TYPE = "application/json;charset=UTF-8";

  @Autowired
  private WebApplicationContext context;

  private MockMvc mockMvc;

  @Value("${rest.synonyms.path}")
  private String path;

  @Before
  public void createMockMvc() {
    mockMvc = MockMvcBuilders.webAppContextSetup(context).build();
  }

  @Test
  public void synonymsWithoutCrossWalking() throws Exception {
    mockMvc
        .perform(getSynonyms().param(CONCEPT, URI_CONCEPT_SOIL))
        .andExpect(status().isOk())
        .andExpect(content().contentType(CONTENT_TYPE))
        .andExpect(jsonPath("$synonyms[*].title", hasItems("Boden", "Soil", "Suelo")))
        .andExpect(jsonPath("$synonyms[*].conceptUri", everyItem(is(URI_CONCEPT_SOIL))));
  }

  private MockHttpServletRequestBuilder getSynonyms() {
    return MockMvcRequestBuilders.get("/" + path);
  }

  @Test
  public void synonymsLanguages() throws Exception {
    mockMvc
        .perform(getSynonyms().param(CONCEPT, URI_CONCEPT_SOIL).param(LANGUAGES, "en,de"))
        .andExpect(status().isOk())
        .andExpect(content().contentType(CONTENT_TYPE))
        .andExpect(jsonPath("$synonyms[*].title", hasItems("Boden", "Soil")))
        .andExpect(jsonPath("$synonyms[*].conceptUri", everyItem(is(URI_CONCEPT_SOIL))))
        .andExpect(
            jsonPath(
                "$synonyms[*].language",
                everyItem(either(startsWith("en")).or(startsWith("de")))));
  }

  @Test
  public void synonymsFoundInThesauri() throws Exception {
    mockMvc
        .perform(
            getSynonyms().param(CONCEPT, URI_CONCEPT_REGULATIONS).param(
                THESAURI,
                "http://www.eionet.europa.eu/gemet/gemetThesaurus"))
        .andExpect(status().isOk())
        .andExpect(content().contentType(CONTENT_TYPE))
        .andExpect(jsonPath("$synonyms[*].title", hasItem("technical regulation")));
  }

  @Test
  public void synonymsNotFoundInThesauri() throws Exception {
    mockMvc
        .perform(
            getSynonyms().param(CONCEPT, URI_CONCEPT_SOIL).param(
                THESAURI,
                "http://www.eionet.europa.eu/gemet/gemetThesaurus"))
        .andExpect(status().isOk())
        .andExpect(content().contentType(CONTENT_TYPE))
        .andExpect(jsonPath("$synonyms", empty()));
  }

  @Test
  public void synonymsCrossWalkingOnly() throws Exception {
    mockMvc
        .perform(
            getSynonyms()
                .param(CONCEPT, URI_CONCEPT_SOIL)
                .param(CROSS_WALKING, "true")
                .param(SERVICE, "Keyword Translation Cross Walking Module"))
        .andExpect(status().isOk())
        .andExpect(content().contentType(CONTENT_TYPE))
        .andExpect(jsonPath("$synonyms[*].conceptUri", both(not(hasItem(URI_CONCEPT_SOIL)))//
            .and(hasItem("http://linkeddata.ge.imati.cnr.it/resource/EARTh/10930"))));
  }

  @Test
  public void limitTwoModules() throws Exception {
    mockMvc
        .perform(
            getSynonyms()
                .param(CONCEPT, URI_CONCEPT_SOIL)
                .param(CROSS_WALKING, "true")
                .param(MAX_COUNT, "2"))
        .andExpect(status().isOk())
        .andExpect(content().contentType(CONTENT_TYPE))
        .andExpect(jsonPath("$synonyms", hasSize(2)));
  }

  @Test
  public void synonymsFoundWithSource() throws Exception {
    mockMvc
        .perform(
            getSynonyms()
                .param(CONCEPT, URI_CONCEPT_SOIL)
                .param(CROSS_WALKING, "true")
                .param(SOURCE, "true"))
        .andExpect(status().isOk())
        .andExpect(content().contentType(CONTENT_TYPE))
        .andExpect(
            jsonPath(
                "$synonyms[*].source",
                everyItem(either(is("INSPIRE theme register")).or(is("EARTh")))));
  }

}
