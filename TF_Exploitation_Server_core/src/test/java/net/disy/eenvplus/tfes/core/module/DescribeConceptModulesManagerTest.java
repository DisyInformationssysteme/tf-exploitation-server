package net.disy.eenvplus.tfes.core.module;

import static org.hamcrest.Matchers.is;
import static org.junit.Assert.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.Collections;
import java.util.concurrent.Callable;

import net.disy.eenvplus.tfes.core.api.capabilities.ParameterDescription;
import net.disy.eenvplus.tfes.core.api.capabilities.ServiceModuleDescription;
import net.disy.eenvplus.tfes.core.api.exceptions.ServiceException;
import net.disy.eenvplus.tfes.core.api.modules.IDescriptionProviderServiceModule;
import net.disy.eenvplus.tfes.core.api.query.IDescribeConceptQuery;
import net.disy.eenvplus.tfes.core.api.response.IConceptDescription;

import org.junit.Test;

public class DescribeConceptModulesManagerTest {
  private static final String SERVICE_MODUL_ID_1 = "Test Modul 1"; //$NON-NLS-1$
  protected static final String TEST_RESPONSE = "Test Response"; //$NON-NLS-1$

  private static final IConceptDescription TEST_DESCRIPTION = new IConceptDescription() {

    @Override
    public String getResponse() {
      return TEST_RESPONSE;
    }
  };

  private DescribeConceptModulesManager manager = new DescribeConceptModulesManager();

  @Test
  public void delegatesDescribeConceptToModules() throws ServiceException {
    IDescriptionProviderServiceModule serviceModule = addServiceModuleMock(SERVICE_MODUL_ID_1);
    when(serviceModule.getDescribeConcept(any(IDescribeConceptQuery.class))).thenReturn(
        createTestCallable(null));

    IDescribeConceptQuery query = mock(IDescribeConceptQuery.class);

    IConceptDescription description = manager.getConceptDescription(query);

    verify(serviceModule).getDescribeConcept(query);
    assertThat(description, is(TEST_DESCRIPTION));
  }

  private IDescriptionProviderServiceModule addServiceModuleMock(String serviceModulId) {
    IDescriptionProviderServiceModule module = mock(IDescriptionProviderServiceModule.class);
    when(module.getDescription())
        .thenReturn(
            new ServiceModuleDescription(serviceModulId, Collections
                .<ParameterDescription> emptyList()));
    manager.getServiceModules().add(module);
    return module;
  }

  private Callable<IConceptDescription> createTestCallable(final Exception toThrow) {
    return new Callable<IConceptDescription>() {

      @Override
      public IConceptDescription call() throws Exception {
        if (toThrow != null) {
          throw toThrow;
        }
        return TEST_DESCRIPTION;
      }
    };
  }

}
