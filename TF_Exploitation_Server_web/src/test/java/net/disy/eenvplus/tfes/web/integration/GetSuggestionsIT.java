//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.web.integration;

import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.CROSS_WALKING;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.KEYWORD;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.LANGUAGES;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.MAX_COUNT;
import static org.hamcrest.Matchers.containsInAnyOrder;
import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.Matchers.either;
import static org.hamcrest.Matchers.everyItem;
import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.Matchers.startsWith;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.hamcrest.Matcher;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

// NOT_PUBLISHED
@RunWith(SpringJUnit4ClassRunner.class)
@WebAppConfiguration
@ContextConfiguration("testApplicationContext.xml")
@ActiveProfiles("integration-test")
@SuppressWarnings("nls")
public class GetSuggestionsIT {

  private static final String CONTENT_TYPE = "application/json;charset=UTF-8";

  @Autowired
  private WebApplicationContext context;

  private MockMvc mockMvc;

  @Value("${rest.suggestions.path}")
  private String path;

  @Before
  public void createMockMvc() {
    mockMvc = MockMvcBuilders.webAppContextSetup(context).build();
  }

  @Test
  public void simpleKeyword() throws Exception {
    mockMvc
        .perform(getSuggestion().param(KEYWORD, "soil"))
        .andExpect(status().isOk())
        .andExpect(content().contentType(CONTENT_TYPE))
        .andExpect(jsonPath("$suggestions").isArray())
        .andExpect(jsonPath("$suggestions[0].title", containsString("soil")));

  }

  private MockHttpServletRequestBuilder getSuggestion() {
    return MockMvcRequestBuilders.get("/" + path);
  }

  @Test
  public void missingKeyword() throws Exception {
    mockMvc
        .perform(getSuggestion())
        .andExpect(status().isBadRequest())
        .andExpect(content().contentType(CONTENT_TYPE))
        .andExpect(jsonPath("$.code").value(15))
        .andExpect(jsonPath("$.text").value("Missing parameter: keyword"));

  }

  @Test
  public void limit() throws Exception {
    mockMvc
        .perform(getSuggestion().param(KEYWORD, "soil").param(MAX_COUNT, "2"))
        .andExpect(status().isOk())
        .andExpect(content().contentType(CONTENT_TYPE))
        .andExpect(jsonPath("$suggestions", hasSize(2)));
  }

  @Test
  public void onelanguage() throws Exception {
    mockMvc
        .perform(
            getSuggestion().param(KEYWORD, "soil").param(MAX_COUNT, "2").param(LANGUAGES, "en"))
        .andExpect(status().isOk())
        .andExpect(content().contentType(CONTENT_TYPE))
        .andExpect(jsonPath("$suggestions[*].language", everyItem(startsWith("en"))));
  }

  @Test
  public void twolanguages() throws Exception {
    Matcher<String> hasExpectedLanguage = either(startsWith("en")).or(startsWith("it"));

    mockMvc
        .perform(
            getSuggestion().param(KEYWORD, "geo").param(MAX_COUNT, "2").param(LANGUAGES, "en,it"))
        .andExpect(status().isOk())
        .andExpect(content().contentType(CONTENT_TYPE))
        .andExpect(jsonPath("$suggestions[*].language", everyItem(hasExpectedLanguage)));
  }

  @Test
  public void crossWalking() throws Exception {

    mockMvc
        .perform(
            getSuggestion()
                .param(KEYWORD, "tectus")
                .param(LANGUAGES, "en")
                .param(CROSS_WALKING, "true"))
        .andExpect(status().isOk())
        .andExpect(content().contentType(CONTENT_TYPE))
        .andExpect(jsonPath("$suggestions[*].language", everyItem(startsWith("en"))))
        .andExpect(
            jsonPath(
                "$suggestions[*].conceptUri",
                containsInAnyOrder(
                    "http://aims.fao.org/aos/agrovoc/c_47412",
                    "http://aims.fao.org/aos/agrovoc/c_47413",
                    "http://aims.fao.org/aos/agrovoc/c_47414")));
  }
}
