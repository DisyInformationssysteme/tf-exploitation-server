package net.disy.eenvplus.tfes.web.validation.impl;

import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.CONCEPT;
import static net.disy.eenvplus.tfes.web.api.exceptions.ErrorResponseCodes.MISSING_PARAMETER;
import static net.disy.eenvplus.tfes.web.endpoint.core.IllegalQueryArgumentExceptionMatcher.hasArguments;
import static net.disy.eenvplus.tfes.web.endpoint.core.IllegalQueryArgumentExceptionMatcher.hasResponseCode;
import static net.disy.eenvplus.tfes.web.endpoint.query.ServiceQueryBuilder.createConceptQuery;
import static org.hamcrest.Matchers.arrayContaining;
import static org.hamcrest.Matchers.both;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.is;
import static org.junit.Assert.assertThat;
import net.disy.eenvplus.tfes.core.api.query.IConceptQuery;
import net.disy.eenvplus.tfes.core.api.service.IDataSourceProvider;
import net.disy.eenvplus.tfes.core.api.service.IServiceManager;
import net.disy.eenvplus.tfes.web.api.exceptions.IErrorResponseCode;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
@SuppressWarnings("nls")
public class ConceptQueryValidatorTest {
  private String TEST_CONCEPT = "TestConcept";
  private String TEST_EMPTY_CONCEPT = "  ";

  @Rule
  public ExpectedException thrown = ExpectedException.none();

  @Mock
  private IServiceManager serviceManager;

  @Mock
  private IDataSourceProvider dataSourceProvider;

  @InjectMocks
  private AbstractServiceQueryValidator<IConceptQuery> validator = new ConceptQueryValidator();

  @Test
  public void keywordIsValid() throws Exception {
    IConceptQuery query = createConceptQuery(TEST_CONCEPT).build();

    boolean isValid = validator.validate(query);

    assertThat(isValid, is(true));
  }

  @Test
  public void blankKeywordIsInvalid() {
    thrown.expect(both(hasResponseCode(equalTo((IErrorResponseCode) MISSING_PARAMETER))) //
        .and(hasArguments(arrayContaining((Object) CONCEPT))));

    IConceptQuery query = createConceptQuery(TEST_EMPTY_CONCEPT).build();

    validator.validate(query);
  }

}
