//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.web.validation.impl;

import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.MAX_COUNT;
import static net.disy.eenvplus.tfes.web.api.exceptions.ErrorResponseCodes.SYNTAX_ERROR;
import static net.disy.eenvplus.tfes.web.api.exceptions.ErrorResponseCodes.UNKNOWN_LANGUAGE;
import static net.disy.eenvplus.tfes.web.api.exceptions.ErrorResponseCodes.UNKNOWN_SERVICE;
import static net.disy.eenvplus.tfes.web.api.exceptions.ErrorResponseCodes.UNKNOWN_THESAURI;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import net.disy.eenvplus.tfes.core.api.capabilities.IDataSourceConfiguration;
import net.disy.eenvplus.tfes.core.api.capabilities.ServiceModuleDescription;
import net.disy.eenvplus.tfes.core.api.query.IServiceQuery;
import net.disy.eenvplus.tfes.core.api.service.IDataSourceProvider;
import net.disy.eenvplus.tfes.web.endpoint.core.IllegalQueryArgumentException;
import net.disy.eenvplus.tfes.web.validation.api.IServiceQueryValidator;
import net.disy.eenvplus.tfes.web.validation.utilities.Ensure;
import net.disy.eenvplus.tfes.web.validation.utilities.Filter;

import org.springframework.beans.factory.annotation.Autowired;

// NOT_PUBLISHED
public abstract class AbstractServiceQueryValidator<Q extends IServiceQuery>
    implements
    IServiceQueryValidator<Q> {

  @Autowired
  private IDataSourceProvider dataSourceProvider;

  protected Collection<IDataSourceConfiguration> getDataSources() {
    return dataSourceProvider.getSources();
  }

  protected abstract List<ServiceModuleDescription> getServiceModules();

  @Override
  public boolean validate(Q query) {
    boolean isValid = validateMaxCount(query);
    isValid &= validateThesauri(query);
    isValid &= validateLanguage(query);
    isValid &= validateService(query);
    isValid &= validateExtraParameters(query);
    isValid &= validateCustomFields(query);
    return isValid;
  }

  protected boolean validateCustomFields(Q query) throws IllegalQueryArgumentException {
    return true;
  }

  private boolean validateMaxCount(IServiceQuery query) {
    if (query.getMaxCount() < 0) {
      throw new IllegalQueryArgumentException(SYNTAX_ERROR, MAX_COUNT);
    }
    return query.getMaxCount() >= 0;
  }

  private boolean validateThesauri(IServiceQuery query) {
    Collection<IDataSourceConfiguration> sources = getDataSources();
    List<String> sourceUris = new ArrayList<>(sources.size());
    for (IDataSourceConfiguration current : sources) {
      sourceUris.add(current.getOnlineResource());
    }
    Ensure.collectionContainsAll(sourceUris, query.getThesauri(), UNKNOWN_THESAURI);
    return true;
  }

  private boolean validateLanguage(IServiceQuery query) {
    Ensure.collectionContainsAll(
        determineKnownLanguages(query),
        query.getLanguages(),
        UNKNOWN_LANGUAGE);
    return true;
  }

  private Set<String> determineKnownLanguages(IServiceQuery query) {
    Collection<IDataSourceConfiguration> sources = determineSelectedThesauri(query);
    Set<String> knownLanguages = new HashSet<>();
    for (IDataSourceConfiguration current : sources) {
      knownLanguages.addAll(current.getLanguages());
    }
    return knownLanguages;
  }

  private Collection<IDataSourceConfiguration> determineSelectedThesauri(IServiceQuery query) {
    Collection<IDataSourceConfiguration> sources = getDataSources();
    List<String> selectedThesauri = query.getThesauri();
    if (selectedThesauri.isEmpty()) {
      return sources;
    }
    return filterThesauri(selectedThesauri, sources);
  }

  private Collection<IDataSourceConfiguration> filterThesauri(
      List<String> selectedThesauri,
      Collection<IDataSourceConfiguration> sources) {
    List<IDataSourceConfiguration> selected = new ArrayList<>(selectedThesauri.size());
    for (IDataSourceConfiguration current : sources) {
      if (selectedThesauri.contains(current.getOnlineResource())) {
        selected.add(current);
      }
    }
    return selected;
  }

  private boolean validateService(Q query) throws IllegalQueryArgumentException {
    Ensure.collectionContainsAll(
        determineKnownServiceModules(),
        query.getServiceModules(),
        UNKNOWN_SERVICE);
    return true;
  }

  private Set<String> determineKnownServiceModules() {
    List<ServiceModuleDescription> suggestionsDescriptions = getServiceModules();
    Set<String> knownServiceModules = new HashSet<>(suggestionsDescriptions.size());
    for (ServiceModuleDescription serviceModule : suggestionsDescriptions) {
      knownServiceModules.add(serviceModule.getServiceId());
    }
    return knownServiceModules;
  }

  private boolean validateExtraParameters(Q query) throws IllegalQueryArgumentException {
    Ensure.collectionContainsAll(
        determineKnownParameters(),
        query.getExtraParameters().keySet(),
        SYNTAX_ERROR);
    return true;
  }

  private Set<String> determineKnownParameters() {
    List<ServiceModuleDescription> suggestionsDescriptions = getServiceModules();
    Set<String> knownParameters = new HashSet<>();
    for (ServiceModuleDescription serviceModule : suggestionsDescriptions) {
      Filter.filterCommonElements(knownParameters, serviceModule.getExtraParameterNames());
    }
    return knownParameters;
  }
}
