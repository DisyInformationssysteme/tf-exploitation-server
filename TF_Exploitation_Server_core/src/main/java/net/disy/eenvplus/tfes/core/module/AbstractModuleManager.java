//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.core.module;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

import net.disy.eenvplus.tfes.core.api.capabilities.ServiceModuleDescription;
import net.disy.eenvplus.tfes.core.api.exceptions.ServiceException;
import net.disy.eenvplus.tfes.core.api.modules.IServiceModule;
import net.disy.eenvplus.tfes.core.api.query.IServiceQuery;

// NOT_PUBLISHED

public abstract class AbstractModuleManager<M extends IServiceModule, Q extends IServiceQuery, R> {

  protected abstract List<M> getServiceModules();

  public List<ServiceModuleDescription> getServiceModuleDescription() {
    Collection<M> serviceModules = getServiceModules();
    List<ServiceModuleDescription> descriptions = new ArrayList<>(serviceModules.size());
    for (IServiceModule module : serviceModules) {
      descriptions.add(module.getDescription());
    }
    return descriptions;
  }

  protected Set<Future<R>> submitQuery(Q query) {
    ExecutorService executor = Executors.newSingleThreadExecutor();
    Set<Future<R>> futures = new HashSet<>();
    for (M module : getSelectedModules(query.getServiceModules())) {
      Future<R> future = executor.submit(createCallable(query, module));
      futures.add(future);
    }
    return futures;
  }

  private List<M> getSelectedModules(List<String> serviceIds) {
    if (serviceIds.isEmpty()) {
      return getServiceModules();
    }
    List<M> selectedModules = new ArrayList<>(serviceIds.size());
    for (M currentModule : getServiceModules()) {
      ServiceModuleDescription moduleDescription = currentModule.getDescription();
      if (serviceIds.contains(moduleDescription.getServiceId())) {
        selectedModules.add(currentModule);
      }
    }
    return selectedModules;
  }

  protected abstract Callable<R> createCallable(Q query, M module);

  protected Collection<R> retrieveResults(Collection<Future<R>> futures) throws ServiceException {
    List<R> result = new LinkedList<>();
    for (Future<R> future : futures) {
      try {
        result.add(future.get());
      }
      catch (InterruptedException exception) {
        throw new ServiceException(exception);
      }
      catch (ExecutionException exception) {
        Throwable cause = exception.getCause();
        throw wrapException(cause);
      }
    }
    return result;
  }

  private ServiceException wrapException(Throwable cause) throws ServiceException {
    if (cause instanceof ServiceException) {
      return (ServiceException) cause;
    }
    return new ServiceException(cause);
  }

}
