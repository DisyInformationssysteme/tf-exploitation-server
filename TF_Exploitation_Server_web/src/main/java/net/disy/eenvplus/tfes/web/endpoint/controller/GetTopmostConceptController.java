//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.web.endpoint.controller;

import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.EXTRA_PARAMS;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.LANGUAGES;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.MAX_COUNT;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.SERVICE;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.THESAURI;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import net.disy.eenvplus.tfes.core.api.exceptions.ServiceException;
import net.disy.eenvplus.tfes.core.api.response.ILabelledConcept;
import net.disy.eenvplus.tfes.core.api.response.ITopMostConcept;
import net.disy.eenvplus.tfes.core.api.service.IServiceManager;
import net.disy.eenvplus.tfes.web.api.rest.RestApiKeywordObject;
import net.disy.eenvplus.tfes.web.api.rest.RestApiSkosConceptScheme;
import net.disy.eenvplus.tfes.web.api.rest.RestApiTopMostConcept;
import net.disy.eenvplus.tfes.web.api.rest.RestApiTopMostConcepts;
import net.disy.eenvplus.tfes.web.endpoint.converter.RestApiKeywordConverter;
import net.disy.eenvplus.tfes.web.endpoint.core.ISelfDescribingOperation;
import net.disy.eenvplus.tfes.web.endpoint.core.OperationDescription;
import net.disy.eenvplus.tfes.web.endpoint.query.ServiceQuery;
import net.disy.eenvplus.tfes.web.endpoint.query.ServiceQueryBuilder;
import net.disy.eenvplus.tfes.web.validation.api.ITopMostConceptQueryValidator;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

// NOT_PUBLISHED

@RestController
@RequestMapping("${rest.topmost.concept.path}")
public class GetTopmostConceptController implements ISelfDescribingOperation {

  private static final String PATH_TOPMOST_CONCEPT = "rest.topmost.concept.path"; //$NON-NLS-1$

  @Autowired
  IServiceManager serviceManager;

  @Autowired
  private Environment environment;

  @Autowired
  private ITopMostConceptQueryValidator queryValidator;

  @Autowired
  private RestApiKeywordConverter restApiKeywordConverter;

  @Override
  public OperationDescription getOperationDescription() {
    return OperationDescription.Builder
        .createDescriptionFor(
            environment.getProperty(PATH_TOPMOST_CONCEPT),
            environment.getProperty(PATH_TOPMOST_CONCEPT))
        .withRequestMethod(RequestMethod.GET)
        .withServiceModules(serviceManager.getTopMostConceptDescriptions())
        .withStringParameter(MAX_COUNT)
        .withStringParameter(THESAURI)
        .withStringParameter(SERVICE)
        .withStringParameter(LANGUAGES)
        .build();
  }

  @RequestMapping(method = RequestMethod.GET, produces = "application/json; charset=UTF-8")
  public RestApiTopMostConcepts getTopMostConcepts(
      @RequestParam(value = MAX_COUNT, defaultValue = "0") int maxCount,
      @RequestParam(value = THESAURI, defaultValue = "") String thesauri,
      @RequestParam(value = SERVICE, defaultValue = "") String service,
      @RequestParam(value = LANGUAGES, defaultValue = "") String languages,
      @RequestParam(value = EXTRA_PARAMS, defaultValue = "") String extraParams)
      throws ServiceException {

    ServiceQuery query = ServiceQueryBuilder
        .createEmptyQuery()
        .withMaxCount(maxCount)
        .withThesauri(thesauri)
        .withServiceModules(service)
        .withLanguages(languages)
        .withExtraParameters(extraParams)
        .build();
    queryValidator.validate(query);
    Collection<ITopMostConcept> topMostConcepts = serviceManager.getTopMostConcepts(query);
    return createResponse(topMostConcepts);
  }

  private RestApiTopMostConcepts createResponse(Collection<ITopMostConcept> topMostConcepts) {
    RestApiTopMostConcepts response = new RestApiTopMostConcepts();
    response.getTopMostConcept().addAll(createResponseEntries(topMostConcepts));
    return response;
  }

  private Collection<RestApiTopMostConcept> createResponseEntries(
      Collection<ITopMostConcept> topMostConcepts) {
    List<RestApiTopMostConcept> responseConcepts = new ArrayList<>(topMostConcepts.size());
    for (ITopMostConcept current : topMostConcepts) {
      responseConcepts.add(convert(current));
    }
    return responseConcepts;
  }

  private RestApiTopMostConcept convert(ITopMostConcept concept) {
    RestApiTopMostConcept responseConcept = new RestApiTopMostConcept();
    responseConcept.setSkosConceptScheme(convertConceptScheme(concept.getConceptScheme()));
    responseConcept.getKeyword().addAll(convert(concept.getKeywords()));
    return responseConcept;
  }

  private RestApiSkosConceptScheme convertConceptScheme(ILabelledConcept conceptScheme) {
    RestApiSkosConceptScheme responseConceptScheme = new RestApiSkosConceptScheme();
    responseConceptScheme.setSkosConceptSchemeLabel(conceptScheme.getLabel());
    responseConceptScheme.setLanguage(conceptScheme.getLanguage());
    responseConceptScheme.setSkosConceptSchemeURI(conceptScheme.getConceptUri());
    return responseConceptScheme;
  }

  private Collection<RestApiKeywordObject> convert(Collection<ILabelledConcept> keywords) {
    List<RestApiKeywordObject> responseSuggestions = new ArrayList<>(keywords.size());
    for (ILabelledConcept current : keywords) {
      responseSuggestions.add(restApiKeywordConverter.convert(current));
    }
    return responseSuggestions;
  }
}
