//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.core.module;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import net.disy.eenvplus.tfes.core.api.response.ILabelledConcept;
import net.disy.eenvplus.tfes.core.api.response.ITopMostConcept;

import org.springframework.stereotype.Service;

// NOT_PUBLISHED
@Service
public class TopMostConceptAggregator {

  public Collection<ITopMostConcept> aggregate(Collection<ITopMostConcept> topMostConcepts) {
    Map<String, ILabelledConcept> schemes = new HashMap<>();
    Map<String, List<ILabelledConcept>> keywords = new HashMap<>();

    doAggregate(topMostConcepts, schemes, keywords);

    return createResult(schemes, keywords);
  }

  private void doAggregate(
      Collection<ITopMostConcept> topMostConcepts,
      Map<String, ILabelledConcept> schemes,
      Map<String, List<ILabelledConcept>> keywords) {
    for (ITopMostConcept concept : topMostConcepts) {
      ILabelledConcept conceptScheme = concept.getConceptScheme();
      String conceptKey = conceptScheme.getConceptUri();
      if (schemes.containsKey(conceptKey) && keywords.containsKey(conceptKey)) {
        List<ILabelledConcept> current = keywords.get(conceptKey);
        current.addAll(concept.getKeywords());
      }
      else {
        schemes.put(conceptKey, conceptScheme);
        keywords.put(conceptKey, new ArrayList<>(concept.getKeywords()));
      }
    }
  }

  private Collection<ITopMostConcept> createResult(
      Map<String, ILabelledConcept> schemes,
      Map<String, List<ILabelledConcept>> keywords) {
    Collection<ITopMostConcept> result = new ArrayList<>(schemes.size());
    for (Entry<String, ILabelledConcept> concept : schemes.entrySet()) {
      String key = concept.getKey();
      result.add(createResultItem(concept.getValue(), keywords.get(key)));
    }
    return result;
  }

  private ITopMostConcept createResultItem(
      final ILabelledConcept scheme,
      final Collection<ILabelledConcept> keywords) {
    return new ITopMostConcept() {

      @Override
      public Collection<ILabelledConcept> getKeywords() {
        return keywords;
      }

      @Override
      public ILabelledConcept getConceptScheme() {
        return scheme;
      }
    };
  }
}
