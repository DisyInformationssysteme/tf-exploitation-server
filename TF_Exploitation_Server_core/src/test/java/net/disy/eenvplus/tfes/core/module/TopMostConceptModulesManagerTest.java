package net.disy.eenvplus.tfes.core.module;

import static org.hamcrest.Matchers.any;
import static org.hamcrest.Matchers.contains;
import static org.junit.Assert.assertThat;
import static org.mockito.Matchers.anyCollection;
import static org.mockito.Mockito.when;

import java.util.Collection;

import net.disy.eenvplus.tfes.core.api.modules.ITopMostConceptProviderServiceModule;
import net.disy.eenvplus.tfes.core.api.query.ITopMostConceptQuery;
import net.disy.eenvplus.tfes.core.api.response.ITopMostConcept;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.runners.MockitoJUnitRunner;
import org.mockito.stubbing.Answer;

@RunWith(MockitoJUnitRunner.class)
@SuppressWarnings("nls")
public class TopMostConceptModulesManagerTest {

  private static final String SERVICE_MODUL_ID_1 = "erstes Service Modul";

  @Mock
  private ITopMostConceptQuery query;

  @Mock
  private ITopMostConcept simpleSuggestion;

  @Mock
  private TopMostConceptAggregator aggregator;

  @InjectMocks
  private TopMostConceptModulesManager manager;

  @SuppressWarnings("unchecked")
  @Before
  public void initAggregator() {
    when(aggregator.aggregate(anyCollection())).thenAnswer(
        new Answer<Collection<ITopMostConcept>>() {

          @Override
          public Collection<ITopMostConcept> answer(InvocationOnMock invocation) throws Throwable {
            Object[] arguments = invocation.getArguments();
            return (Collection<ITopMostConcept>) arguments[0];
          }
        });
  }

  @Test
  public void singleResult() throws Exception {

    ITopMostConceptProviderServiceModule serviceModule = TopMostConceptProviderServiceModuleMockBuilder
        .createMock(SERVICE_MODUL_ID_1)
        .withAnswer(any(ITopMostConceptQuery.class), simpleSuggestion)
        .build();

    manager.getServiceModules().add(serviceModule);

    Collection<ITopMostConcept> result = manager.getTopMostConcepts(query);

    assertThat(result, contains(simpleSuggestion));
  }
}
