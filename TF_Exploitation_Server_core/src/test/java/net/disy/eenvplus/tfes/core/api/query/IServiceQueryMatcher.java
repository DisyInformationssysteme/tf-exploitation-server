//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.core.api.query;

import static org.hamcrest.Matchers.allOf;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.is;

import java.util.Map;

import org.hamcrest.FeatureMatcher;
import org.hamcrest.Matcher;
import org.hamcrest.Matchers;

// NOT_PUBLISHED
public class IServiceQueryMatcher {

  private static final Matcher<Iterable<? extends String>> NO_ENTRIES = Matchers
      .<String> emptyIterable();

  public static Matcher<? super IServiceQuery> hasMaxCount(Matcher<Integer> expected) {
    return new FeatureMatcher<IServiceQuery, Integer>(expected, "Max Count", "Max Count") { //$NON-NLS-1$ //$NON-NLS-2$

      @Override
      protected Integer featureValueOf(IServiceQuery query) {
        return query.getMaxCount();
      }

    };
  }

  public static Matcher<? super IServiceQuery> hasThesauri(
      Matcher<Iterable<? extends String>> expected) {
    return new FeatureMatcher<IServiceQuery, Iterable<String>>(expected, "Thesauri", "Thesauri") { //$NON-NLS-1$ //$NON-NLS-2$

      @Override
      protected Iterable<String> featureValueOf(IServiceQuery query) {
        return query.getThesauri();
      }

    };
  }

  public static Matcher<? super IServiceQuery> hasServiceModules(
      Matcher<Iterable<? extends String>> expected) {
    return new FeatureMatcher<IServiceQuery, Iterable<String>>(
        expected,
        "Service Modules", "Service Modules") { //$NON-NLS-1$ //$NON-NLS-2$

      @Override
      protected Iterable<String> featureValueOf(IServiceQuery query) {
        return query.getServiceModules();
      }

    };
  }

  public static Matcher<? super IServiceQuery> hasLanguages(
      Matcher<Iterable<? extends String>> expected) {
    return new FeatureMatcher<IServiceQuery, Iterable<String>>(expected, "Languages", "Languages") { //$NON-NLS-1$ //$NON-NLS-2$

      @Override
      protected Iterable<String> featureValueOf(IServiceQuery query) {
        return query.getLanguages();
      }

    };
  }

  public static Matcher<? super IServiceQuery> hasExtraParameters(
      Matcher<Map<? extends String, ? extends Object>> expected) {
    return new FeatureMatcher<IServiceQuery, Map<String, ? extends Object>>(
        expected,
        "Extra Parameters", "Extra Parameters") { //$NON-NLS-1$ //$NON-NLS-2$

      @Override
      protected Map<String, ? extends Object> featureValueOf(IServiceQuery query) {
        return query.getExtraParameters();
      }

    };
  }

  public static Matcher<? super IServiceQuery> isEmptyQuery() {
    return allOf(
        hasLanguages(NO_ENTRIES),
        hasServiceModules(NO_ENTRIES),
        hasThesauri(NO_ENTRIES),
        hasMaxCount(equalTo(0)),
        hasCrosswalking(is(false)));
  }

  public static Matcher<? super IServiceQuery> hasCrosswalking(Matcher<Boolean> expected) {
    return new FeatureMatcher<IServiceQuery, Boolean>(expected, "Cross Walking", "Cross Walking") { //$NON-NLS-1$ //$NON-NLS-2$

      @Override
      protected Boolean featureValueOf(IServiceQuery query) {
        return query.isCrossWalkingActive();
      }

    };
  }

}
