//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.modules.semantic.explorative.search.crosswalking;

import static net.disy.eenvplus.tfes.modules.semantic.explorative.search.crosswalking.RelativesCrossWalkingQueryBuilder.createRelativesQuery;

import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import net.disy.eenvplus.tfes.core.api.capabilities.ParameterDescription;
import net.disy.eenvplus.tfes.core.api.capabilities.ServiceModuleDescription;
import net.disy.eenvplus.tfes.core.api.modules.IRelativeProviderServiceModule;
import net.disy.eenvplus.tfes.core.api.query.IRelativeQuery;
import net.disy.eenvplus.tfes.core.api.response.IRelative;
import net.disy.eenvplus.tfes.modules.core.ISparqlConnector;
import net.disy.eenvplus.tfes.modules.semantic.explorative.search.RelativesResultSetMapper;

import org.springframework.beans.factory.annotation.Autowired;

import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.query.ResultSet;

// NOT_PUBLISHED
public class SemanticExplorativeSearchCrossWalkingModule implements IRelativeProviderServiceModule {

  @Autowired
  private ISparqlConnector sparqlConnector;

  static final String SERVICE_ID = "Keyword Explanation Cross Walking Module"; //$NON-NLS-1$
  static final String SOURCE_LABEL = "source_label"; //$NON-NLS-1$

  @Override
  public ServiceModuleDescription getDescription() {
    List<ParameterDescription> parameterDescriptions = Collections.emptyList();
    return new ServiceModuleDescription(SERVICE_ID, parameterDescriptions);
  }

  @Override
  public Callable<Collection<IRelative>> getRelatives(final IRelativeQuery query) {
    return new Callable<Collection<IRelative>>() {

      @Override
      public Collection<IRelative> call() throws Exception {
        if (!query.isCrossWalkingActive()) {
          return Collections.emptyList();
        }
        Query jenaQuery = createRelativesQuery(query.getConcept(), SOURCE_LABEL)
            .withLimit(query.getMaxCount())
            .withSchemas(query.getThesauri())
            .withLanguages(query.getLanguages())
            .withSource(query.isSourceActive())
            .build();
        ResultSet result = sparqlConnector.executeSparqlQuery(jenaQuery);
        return RelativesResultSetMapper.create(SOURCE_LABEL).map(result);
      }
    };
  }

}
