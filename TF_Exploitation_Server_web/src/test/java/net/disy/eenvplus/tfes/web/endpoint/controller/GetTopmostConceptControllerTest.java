package net.disy.eenvplus.tfes.web.endpoint.controller;

import static java.util.Arrays.asList;
import static java.util.Collections.emptyList;
import static net.disy.eenvplus.tfes.core.api.capabilities.ParameterDescriptionMatcher.hasName;
import static net.disy.eenvplus.tfes.core.api.query.IServiceQueryMatcher.hasExtraParameters;
import static net.disy.eenvplus.tfes.core.api.query.IServiceQueryMatcher.hasLanguages;
import static net.disy.eenvplus.tfes.core.api.query.IServiceQueryMatcher.hasMaxCount;
import static net.disy.eenvplus.tfes.core.api.query.IServiceQueryMatcher.hasServiceModules;
import static net.disy.eenvplus.tfes.core.api.query.IServiceQueryMatcher.hasThesauri;
import static net.disy.eenvplus.tfes.core.api.query.IServiceQueryMatcher.isEmptyQuery;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.LANGUAGES;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.MAX_COUNT;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.SERVICE;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.THESAURI;
import static net.disy.eenvplus.tfes.web.api.rest.RestApiSkosConceptSchemeMatcher.hasLabel;
import static net.disy.eenvplus.tfes.web.api.rest.RestApiSkosConceptSchemeMatcher.hasLanguage;
import static net.disy.eenvplus.tfes.web.api.rest.RestApiSkosConceptSchemeMatcher.hasUri;
import static net.disy.eenvplus.tfes.web.api.rest.RestApiTopMostConceptMatcher.hasSkosConceptScheme;
import static net.disy.eenvplus.tfes.web.api.rest.RestApiTopMostConceptMatcher.hasTopMostConcepts;
import static net.disy.eenvplus.tfes.web.endpoint.core.OperationDescriptionMatcher.hasEndpointDescriptions;
import static net.disy.eenvplus.tfes.web.endpoint.core.OperationDescriptionMatcher.hasOnlineResource;
import static net.disy.eenvplus.tfes.web.endpoint.core.OperationDescriptionMatcher.hasRequestMethod;
import static net.disy.eenvplus.tfes.web.endpoint.core.RestEndpointDescriptionMatcher.hasParameters;
import static net.disy.eenvplus.tfes.web.endpoint.core.RestEndpointDescriptionMatcher.hasServiceId;
import static org.apache.commons.lang3.StringUtils.EMPTY;
import static org.hamcrest.Matchers.allOf;
import static org.hamcrest.Matchers.both;
import static org.hamcrest.Matchers.contains;
import static org.hamcrest.Matchers.containsInAnyOrder;
import static org.hamcrest.Matchers.equalTo;
import static org.junit.Assert.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyString;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.web.bind.annotation.RequestMethod.GET;

import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import net.disy.eenvplus.tfes.core.api.capabilities.ParameterDescription;
import net.disy.eenvplus.tfes.core.api.capabilities.ServiceModuleDescription;
import net.disy.eenvplus.tfes.core.api.query.ITopMostConceptQuery;
import net.disy.eenvplus.tfes.core.api.response.ILabelledConcept;
import net.disy.eenvplus.tfes.core.api.response.ISuggestion;
import net.disy.eenvplus.tfes.core.api.response.ITopMostConcept;
import net.disy.eenvplus.tfes.core.api.service.IServiceManager;
import net.disy.eenvplus.tfes.web.api.rest.RestApiSkosConceptScheme;
import net.disy.eenvplus.tfes.web.api.rest.RestApiTopMostConcepts;
import net.disy.eenvplus.tfes.web.endpoint.converter.RestApiKeywordConverter;
import net.disy.eenvplus.tfes.web.endpoint.core.OperationDescription;
import net.disy.eenvplus.tfes.web.endpoint.model.TestSuggestion;
import net.disy.eenvplus.tfes.web.endpoint.query.ServiceQuery;
import net.disy.eenvplus.tfes.web.validation.api.ITopMostConceptQueryValidator;

import org.hamcrest.Matcher;
import org.hamcrest.Matchers;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.runners.MockitoJUnitRunner;
import org.springframework.core.env.Environment;

@SuppressWarnings("nls")
@RunWith(MockitoJUnitRunner.class)
public class GetTopmostConceptControllerTest {

  private static final String PATH = "Testpfad";
  private static final String TEST_SERVICE_MODUL_NAME = "Test Service Module";
  private static final ServiceModuleDescription TEST_SERVICE_MODUL = new ServiceModuleDescription(
      TEST_SERVICE_MODUL_NAME,//
      Collections.<ParameterDescription> emptyList());

  @Mock
  private Environment environment;

  @Mock
  private IServiceManager serviceManager;

  @Mock
  private ITopMostConceptQueryValidator validator;

  @Spy
  private RestApiKeywordConverter restApiKeywordConverter;

  @InjectMocks
  private GetTopmostConceptController controller;

  @Captor
  private ArgumentCaptor<ServiceQuery> query;

  @Test
  public void correctDescription() {
    when(environment.getProperty(anyString())).thenReturn(PATH);
    when(serviceManager.getTopMostConceptDescriptions()).thenReturn(asList(TEST_SERVICE_MODUL));

    OperationDescription description = controller.getOperationDescription();

    Matcher<? super OperationDescription> expectedOnlineResource = hasOnlineResource(equalTo(PATH));
    Matcher<? super OperationDescription> expectedRequestMethod = hasRequestMethod(equalTo(GET));
    Matcher<? super OperationDescription> expectedServiceModules = hasEndpointDescriptions(contains(hasServiceId(equalTo(TEST_SERVICE_MODUL_NAME))));
    @SuppressWarnings("unchecked")
    Matcher<Iterable<? extends ParameterDescription>> expectedParameters = containsInAnyOrder(
        hasName(equalTo(MAX_COUNT)),
        hasName(equalTo(THESAURI)),
        hasName(equalTo(SERVICE)),
        hasName(equalTo(LANGUAGES)));
    Matcher<? super OperationDescription> expectedEndpointParameters = hasEndpointDescriptions(contains(hasParameters(expectedParameters)));

    assertThat(
        description,
        allOf(
            expectedOnlineResource,
            expectedRequestMethod,
            expectedServiceModules,
            expectedEndpointParameters));

  }

  @Test
  public void emptyRequest() throws Exception {
    controller.getTopMostConcepts(0, EMPTY, EMPTY, EMPTY, EMPTY);

    verify(validator).validate(query.capture());

    assertThat(query.getValue(), isEmptyQuery());
  }

  @Test
  public void emptyResponse() throws Exception {
    List<ITopMostConcept> emptyServiceResponse = emptyList();
    when(serviceManager.getTopMostConcepts(any(ITopMostConceptQuery.class))).thenReturn(
        emptyServiceResponse);

    RestApiTopMostConcepts topMostConcepts = controller.getTopMostConcepts(
        0,
        EMPTY,
        EMPTY,
        EMPTY,
        EMPTY);

    assertThat(topMostConcepts.getTopMostConcept(), Matchers.empty());
  }

  @Test
  public void queryMaxCount() throws Exception {
    controller.getTopMostConcepts(13, EMPTY, EMPTY, EMPTY, EMPTY);

    verify(validator).validate(query.capture());

    assertThat(query.getValue(), hasMaxCount(equalTo(13)));
  }

  @Test
  public void queryThesauri() throws Exception {
    controller.getTopMostConcepts(0, "Thesaurus1,Thesaurus2", EMPTY, EMPTY, EMPTY);

    verify(validator).validate(query.capture());

    assertThat(query.getValue(), hasThesauri(containsInAnyOrder("Thesaurus1", "Thesaurus2")));
  }

  @Test
  public void queryService() throws Exception {
    controller.getTopMostConcepts(0, EMPTY, "Service1,Service2", EMPTY, EMPTY);

    verify(validator).validate(query.capture());

    assertThat(query.getValue(), hasServiceModules(containsInAnyOrder("Service1", "Service2")));
  }

  @Test
  public void queryLanguages() throws Exception {
    controller.getTopMostConcepts(0, EMPTY, EMPTY, "Sprache1,Sprache2", EMPTY);

    verify(validator).validate(query.capture());

    assertThat(query.getValue(), hasLanguages(containsInAnyOrder("Sprache1", "Sprache2")));
  }

  @Test
  public void queryExtraParameters() throws Exception {
    controller.getTopMostConcepts(0, EMPTY, EMPTY, EMPTY, "Key1:Value1,Key2:Value2");

    verify(validator).validate(query.capture());

    assertThat(
        query.getValue(),
        both(hasExtraParameters(hasEntry("Key1", "Value1"))).and(
            hasExtraParameters(hasEntry("Key2", "Value2"))));
  }

  private static Matcher<Map<? extends String, ? extends Object>> hasEntry(String key, String value) {
    return Matchers.hasEntry(key, (Object) value);
  }

  @Test
  public void responseSingleConcept() throws Exception {
    final ILabelledConcept testKeyword = new TestSuggestion(
        "keywordTitle",
        "keywordLang",
        "keywordUri",
        "keywordSource");
    ITopMostConcept topMostConcept = new ITopMostConcept() {

      @Override
      public Collection<ILabelledConcept> getKeywords() {
        return asList(testKeyword);
      }

      @Override
      public ISuggestion getConceptScheme() {
        return new TestSuggestion("conceptTitle", "conceptLang", "conceptUri", "conceptSource");
      }
    };
    List<ITopMostConcept> topMostConcepts = asList(topMostConcept);
    when(serviceManager.getTopMostConcepts(any(ITopMostConceptQuery.class))).thenReturn(
        topMostConcepts);

    RestApiTopMostConcepts result = controller.getTopMostConcepts(0, EMPTY, EMPTY, EMPTY, EMPTY);

    Matcher<? super RestApiSkosConceptScheme> expectedConceptScheme = allOf(
        hasLabel(equalTo("conceptTitle")),
        hasLanguage(equalTo("conceptLang")),
        hasUri(equalTo("conceptUri")));
    assertThat(result, hasTopMostConcepts(contains(hasSkosConceptScheme(expectedConceptScheme))));
    verify(restApiKeywordConverter).convert(testKeyword);
  }
}
