package net.disy.eenvplus.tfes.modules.clustering;

import static java.util.Arrays.asList;
import static java.util.Collections.emptyList;
import static org.hamcrest.Matchers.contains;
import static org.hamcrest.Matchers.containsInAnyOrder;
import static org.hamcrest.Matchers.either;
import static org.hamcrest.Matchers.emptyCollectionOf;
import static org.junit.Assert.assertThat;

import java.util.Collection;
import java.util.Comparator;
import java.util.List;

import org.junit.Test;

@SuppressWarnings("nls")
public class ClusterAggregatorTest {

  @Test
  public void retainsEmptyList() throws Exception {
    ClusterAggregator<Object, Object, ClusterKeyExtractor<Object, Object>, Comparator<Object>> clusterBuilder = new ClusterAggregator<>(
        null,
        null);

    Collection<Object> representatives = clusterBuilder.findRepresentatives(emptyList());

    assertThat(representatives, emptyCollectionOf(Object.class));
  }

  @Test
  public void retainsSingleElement() throws Exception {
    TestItem testItem = new TestItem(0.0, "key");
    List<TestItem> input = asList(testItem);
    ClusterAggregator<TestItem, String, TestExtractor, TestComparator> clusterBuilder = new ClusterAggregator<>(
        new TestExtractor(),
        new TestComparator());

    Collection<TestItem> representatives = clusterBuilder.findRepresentatives(input);

    assertThat(representatives, contains(testItem));
  }

  @Test
  public void returnsTwoElementsOfDifferentKey() throws Exception {
    TestItem thisItem = new TestItem(0.0, "this");
    TestItem thatItem = new TestItem(0.0, "that");
    List<TestItem> input = asList(thisItem, thatItem);
    ClusterAggregator<TestItem, String, TestExtractor, TestComparator> clusterBuilder = new ClusterAggregator<>(
        new TestExtractor(),
        new TestComparator());

    Collection<TestItem> representatives = clusterBuilder.findRepresentatives(input);

    assertThat(representatives, containsInAnyOrder(thisItem, thatItem));
  }

  @Test
  public void returnsOneElementsOfTwoElementsWithSameKey() throws Exception {
    TestItem thisItem = new TestItem(0.0, "key");
    TestItem thatItem = new TestItem(0.0, "key");
    List<TestItem> input = asList(thisItem, thatItem);
    ClusterAggregator<TestItem, String, TestExtractor, TestComparator> clusterBuilder = new ClusterAggregator<>(
        new TestExtractor(),
        new TestComparator());

    Collection<TestItem> representatives = clusterBuilder.findRepresentatives(input);

    assertThat(representatives, either(contains(thisItem)).or(contains(thatItem)));
  }

  @Test
  public void respectsRankWhenAddingToCluster() throws Exception {
    TestItem thisItem = new TestItem(0.0, "key");
    TestItem thatItem = new TestItem(1.0, "key");
    List<TestItem> input = asList(thisItem, thatItem);
    ClusterAggregator<TestItem, String, TestExtractor, TestComparator> clusterBuilder = new ClusterAggregator<>(
        new TestExtractor(),
        new TestComparator());

    Collection<TestItem> representatives = clusterBuilder.findRepresentatives(input);

    assertThat(representatives, contains(thatItem));
  }

  @Test
  public void mergesCluster() throws Exception {
    TestItem thisItem = new TestItem(0.0, "thisKey");
    TestItem thatItem = new TestItem(0.0, "thatKey");
    TestItem connectItem = new TestItem(0.0, "thisKey", "thatKey");
    List<TestItem> input = asList(thisItem, thatItem, connectItem);
    ClusterAggregator<TestItem, String, TestExtractor, TestComparator> clusterBuilder = new ClusterAggregator<>(
        new TestExtractor(),
        new TestComparator());

    Collection<TestItem> representatives = clusterBuilder.findRepresentatives(input);

    assertThat(
        representatives,
        either(contains(thisItem)).or(contains(thatItem)).or(contains(connectItem)));
  }

  @Test
  public void mergeClusterWithRanking() throws Exception {
    TestItem thisItem = new TestItem(0.0, "thisKey");
    TestItem thatItem = new TestItem(1.0, "thatKey");
    TestItem connectItem = new TestItem(0.0, "thisKey", "thatKey");
    List<TestItem> input = asList(thisItem, thatItem, connectItem);
    ClusterAggregator<TestItem, String, TestExtractor, TestComparator> clusterBuilder = new ClusterAggregator<>(
        new TestExtractor(),
        new TestComparator());

    Collection<TestItem> representatives = clusterBuilder.findRepresentatives(input);

    assertThat(representatives, contains(thatItem));
  }

  @Test
  public void mergesNotUnNullKeys() throws Exception {
    TestItem thisItem = new TestItem(0.0, "thisKey", null);
    TestItem thatItem = new TestItem(0.0, "thatKey", null);
    List<TestItem> input = asList(thisItem, thatItem);
    ClusterAggregator<TestItem, String, TestExtractor, TestComparator> clusterBuilder = new ClusterAggregator<>(
        new TestExtractor(),
        new TestComparator());

    Collection<TestItem> representatives = clusterBuilder.findRepresentatives(input);

    assertThat(representatives, containsInAnyOrder(thisItem, thatItem));
  }

  private class TestItem {
    private String[] keys;
    private double rank;

    private TestItem(double rank, String... keys) {
      this.keys = keys;
      this.rank = rank;
    }

    public Collection<String> getKeys() {
      return asList(keys);
    }

    public double getRank() {
      return rank;
    }
  }

  private static class TestExtractor implements ClusterKeyExtractor<TestItem, String> {
    @Override
    public Collection<String> extractKeys(TestItem item) {
      return item.getKeys();
    }

  }

  private static class TestComparator implements Comparator<TestItem> {
    @Override
    public int compare(TestItem left, TestItem right) {
      return Double.compare(left.getRank(), right.getRank());
    }
  }

}
