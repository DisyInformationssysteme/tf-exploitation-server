package net.disy.eenvplus.tfes.web.endpoint.controller;

import static java.util.Arrays.asList;
import static net.disy.eenvplus.tfes.core.api.query.IServiceQueryMatcher.hasCrosswalking;
import static net.disy.eenvplus.tfes.core.api.query.IServiceQueryMatcher.hasLanguages;
import static net.disy.eenvplus.tfes.core.api.query.IServiceQueryMatcher.hasMaxCount;
import static net.disy.eenvplus.tfes.core.api.query.IServiceQueryMatcher.hasServiceModules;
import static net.disy.eenvplus.tfes.core.api.query.IServiceQueryMatcher.hasThesauri;
import static net.disy.eenvplus.tfes.core.api.query.ISuggestionQueryMatcher.hasKeyword;
import static org.apache.commons.lang3.StringUtils.EMPTY;
import static org.apache.commons.lang3.StringUtils.join;
import static org.hamcrest.Matchers.allOf;
import static org.hamcrest.Matchers.containsInAnyOrder;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.hasEntry;
import static org.hamcrest.Matchers.is;
import static org.junit.Assert.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.Collection;

import net.disy.eenvplus.tfes.core.api.exceptions.ServiceException;
import net.disy.eenvplus.tfes.core.api.query.IServiceQueryMatcher;
import net.disy.eenvplus.tfes.core.api.query.ISuggestionQuery;
import net.disy.eenvplus.tfes.core.api.query.ISuggestionQueryMatcher;
import net.disy.eenvplus.tfes.core.api.response.ISuggestion;
import net.disy.eenvplus.tfes.core.api.service.IServiceManager;
import net.disy.eenvplus.tfes.web.endpoint.converter.RestApiKeywordConverter;
import net.disy.eenvplus.tfes.web.endpoint.model.TestSuggestion;
import net.disy.eenvplus.tfes.web.validation.api.ISuggestionQueryValidator;

import org.hamcrest.Matcher;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.runners.MockitoJUnitRunner;

@SuppressWarnings("nls")
@RunWith(MockitoJUnitRunner.class)
public class GetSuggestionsControllerTest {

  private static final String TEST_KEYWORD = "Testkeyword";
  private static final int TEST_MAX_COUNT = 17;
  protected static final String TEST_CONCEPT_URI = "Test Uri";
  protected static final String TEST_TITLE = "Test Title";
  protected static final String TEST_LANGUAGE = "Test Language";
  private static final String TEST_SOURCE = "Test Source";

  private static final String TEST_THESAURUS_1 = "TestThesaurus1";
  private static final String TEST_THESAURUS_2 = "TestThesaurus2";
  private static final String TEST_THESAURI = join(asList(TEST_THESAURUS_1, TEST_THESAURUS_2), ',');

  private static final String TEST_SERVICE_MODULE_1 = "TestServiceModule1";
  private static final String TEST_SERVICE_MODULE_2 = "TestServiceModule2";
  private static final String TEST_SERVICE_MODULES = join(
      asList(TEST_SERVICE_MODULE_1, TEST_SERVICE_MODULE_2),
      ',');

  private static final String TEST_LANGUAGE_1 = "TestLanguage1";
  private static final String TEST_LANGUAGE_2 = "TestLanguage2";
  private static final String TEST_LANGUAGES = join(asList(TEST_LANGUAGE_1, TEST_LANGUAGE_2), ',');

  private static final String TEST_PARAM_STRING_KEY = "TestStringKey";
  private static final String TEST_PARAM_STRING_VALUE = "TestValue";
  private static final String TEST_PARAM_INT_KEY = "TestIntKey";
  private static final int TEST_PARAM_INT_VALUE = 13;
  private static final boolean TEST_PARAM_CROSS_WALKING = true;
  private static final boolean TEST_PARAM_SOURCE = true;
  private static final String TEST_EXTRA_PARAMS = TEST_PARAM_STRING_KEY
      + ":"
      + TEST_PARAM_STRING_VALUE
      + ","
      + TEST_PARAM_INT_KEY
      + ":"
      + TEST_PARAM_INT_VALUE;

  private static final ISuggestion TEST_SUGGESTION = new TestSuggestion(
      TEST_TITLE,
      TEST_LANGUAGE,
      TEST_CONCEPT_URI,
      TEST_SOURCE);
  @Mock
  private IServiceManager serviceManager;

  @Mock
  private ISuggestionQueryValidator queryValidator;

  @Spy
  private RestApiKeywordConverter restApiKeywordConverter;

  @Captor
  private ArgumentCaptor<ISuggestionQuery> query;

  @InjectMocks
  private GetSuggestionsController getSuggestionsController;

  @Test
  public void delegatesQuery() throws ServiceException {
    getSuggestionsController.getSuggestions(
        TEST_KEYWORD,
        TEST_MAX_COUNT,
        TEST_THESAURI,
        TEST_SERVICE_MODULES,
        TEST_LANGUAGES,
        TEST_PARAM_CROSS_WALKING,
        TEST_PARAM_SOURCE,
        TEST_EXTRA_PARAMS);

    verify(serviceManager, times(1)).getSuggestions(query.capture());

    ISuggestionQuery delegatedQuery = query.getValue();
    assertThat(delegatedQuery, hasKeyword(equalTo(TEST_KEYWORD)));
    assertThat(delegatedQuery, hasMaxCount(equalTo(TEST_MAX_COUNT)));
    @SuppressWarnings("unchecked")
    Matcher<Iterable<? extends String>> testThesauri = containsInAnyOrder(
        equalTo(TEST_THESAURUS_1),
        equalTo(TEST_THESAURUS_2));
    assertThat(delegatedQuery, hasThesauri(testThesauri));
    @SuppressWarnings("unchecked")
    Matcher<Iterable<? extends String>> testModules = containsInAnyOrder(
        equalTo(TEST_SERVICE_MODULE_1),
        equalTo(TEST_SERVICE_MODULE_2));
    assertThat(delegatedQuery, hasServiceModules(testModules));
    @SuppressWarnings("unchecked")
    Matcher<Iterable<? extends String>> testLanguages = containsInAnyOrder(
        equalTo(TEST_LANGUAGE_1),
        equalTo(TEST_LANGUAGE_2));
    assertThat(delegatedQuery, hasLanguages(testLanguages));
    assertThat(delegatedQuery, hasCrosswalking(is(TEST_PARAM_CROSS_WALKING)));
    assertThat(delegatedQuery, ISuggestionQueryMatcher.hasSource(is(TEST_PARAM_SOURCE)));
    assertThat(
        delegatedQuery,
        IServiceQueryMatcher.hasExtraParameters(allOf(
            hasEntry(TEST_PARAM_STRING_KEY, (Object) TEST_PARAM_STRING_VALUE),
            hasEntry(TEST_PARAM_INT_KEY, (Object) String.valueOf(TEST_PARAM_INT_VALUE)))));
  }

  @Test
  public void delegatesResponseCreation() throws ServiceException {
    Collection<ISuggestion> suggestions = asList(TEST_SUGGESTION);
    when(serviceManager.getSuggestions(any(ISuggestionQuery.class))).thenReturn(suggestions);

    getSuggestionsController.getSuggestions(
        TEST_KEYWORD,
        TEST_MAX_COUNT,
        EMPTY,
        EMPTY,
        EMPTY,
        false,
        false,
        EMPTY);

    verify(restApiKeywordConverter).convert(TEST_SUGGESTION);
  }
}
