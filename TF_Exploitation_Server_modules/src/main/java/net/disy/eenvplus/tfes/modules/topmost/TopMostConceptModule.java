//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.modules.topmost;

import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import net.disy.eenvplus.tfes.core.api.capabilities.ParameterDescription;
import net.disy.eenvplus.tfes.core.api.capabilities.ServiceModuleDescription;
import net.disy.eenvplus.tfes.core.api.modules.ITopMostConceptProviderServiceModule;
import net.disy.eenvplus.tfes.core.api.query.ITopMostConceptQuery;
import net.disy.eenvplus.tfes.core.api.response.ITopMostConcept;
import net.disy.eenvplus.tfes.modules.core.ISparqlConnector;

import org.springframework.beans.factory.annotation.Autowired;

import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.query.ResultSet;

// NOT_PUBLISHED
public class TopMostConceptModule implements ITopMostConceptProviderServiceModule {

  private static final String SERVICE_ID = "Top Most Concept Module"; //$NON-NLS-1$

  private static final String SCHEME_LABEL = "conceptSchemeLabel"; //$NON-NLS-1$
  private static final String TOP_MOST_CONCEPT_LABEL = "topMostConceptLabel"; //$NON-NLS-1$

  @Autowired
  private ISparqlConnector sparqlConnector;

  @Override
  public ServiceModuleDescription getDescription() {
    List<ParameterDescription> parameterDescriptions = Collections.emptyList();
    return new ServiceModuleDescription(SERVICE_ID, parameterDescriptions);

  }

  @Override
  public Callable<Collection<ITopMostConcept>> getTopMostConcepts(final ITopMostConceptQuery query) {
    return new Callable<Collection<ITopMostConcept>>() {

      @Override
      public Collection<ITopMostConcept> call() throws Exception {

        Query sparqlQuery = TopMostConceptSparqlQueryBuilder
            .createQuery(SCHEME_LABEL, TOP_MOST_CONCEPT_LABEL)
            .withLanguages(query.getLanguages())
            .withLimit(query.getMaxCount())
            .withSchemas(query.getThesauri())
            .build();

        ResultSet resultSet = sparqlConnector.executeSparqlQuery(sparqlQuery);
        return TopMostConceptSparqlResultSetMapper
            .create(SCHEME_LABEL, TOP_MOST_CONCEPT_LABEL)
            .map(resultSet);
      }
    };
  }

}
