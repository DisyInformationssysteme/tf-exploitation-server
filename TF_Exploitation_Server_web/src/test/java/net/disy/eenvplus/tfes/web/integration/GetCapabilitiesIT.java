//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.web.integration;

import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.CONCEPT;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.CROSS_WALKING;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.KEYWORD;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.LANGUAGES;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.MAX_COUNT;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.SERVICE;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.SOURCE;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.THESAURI;
import static org.hamcrest.Matchers.containsInAnyOrder;
import static org.hamcrest.Matchers.greaterThan;
import static org.hamcrest.Matchers.hasSize;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

// NOT_PUBLISHED
@RunWith(SpringJUnit4ClassRunner.class)
@WebAppConfiguration
@ContextConfiguration("testApplicationContext.xml")
@ActiveProfiles("integration-test")
@SuppressWarnings("nls")
public class GetCapabilitiesIT {

  private static final String CONTENT_TYPE = "application/json;charset=UTF-8";

  @Autowired
  private WebApplicationContext context;

  private MockMvc mockMvc;

  @Value("${rest.capa.path}")
  private String path;

  @Before
  public void createMockMvc() {
    mockMvc = MockMvcBuilders.webAppContextSetup(context).build();
  }

  private MockHttpServletRequestBuilder getCapabilities() {
    return get("/" + path);
  }

  @Test
  public void suggestionCapabilities() throws Exception {
    mockMvc
        .perform(getCapabilities())
        .andExpect(content().contentType(CONTENT_TYPE))
        .andExpect(
            jsonPath(
                "$.operations[?(@.type=='GetSuggestions')].serviceModules[0].parameters[*].name",
                containsInAnyOrder(
                    KEYWORD,
                    MAX_COUNT,
                    LANGUAGES,
                    SERVICE,
                    THESAURI,
                    CROSS_WALKING,
                    SOURCE)));
  }

  @Test
  public void synonymsCapabilities() throws Exception {
    mockMvc
        .perform(getCapabilities())
        .andExpect(content().contentType(CONTENT_TYPE))
        .andExpect(
            jsonPath(
                "$.operations[?(@.type=='GetSynonyms')].serviceModules[0].parameters[*].name",
                containsInAnyOrder(
                    CONCEPT,
                    MAX_COUNT,
                    LANGUAGES,
                    SERVICE,
                    THESAURI,
                    CROSS_WALKING,
                    SOURCE)));
  }

  @Test
  public void relativesCapabilities() throws Exception {
    mockMvc
        .perform(getCapabilities())
        .andExpect(content().contentType(CONTENT_TYPE))
        .andExpect(
            jsonPath(
                "$.operations[?(@.type=='GetRelatives')].serviceModules[0].parameters[*].name",
                containsInAnyOrder(
                    CONCEPT,
                    MAX_COUNT,
                    LANGUAGES,
                    SERVICE,
                    THESAURI,
                    CROSS_WALKING,
                    SOURCE)));
  }

  @Test
  public void containsAtLeastTwoDataSources() throws Exception {
    mockMvc
        .perform(getCapabilities())
        .andExpect(content().contentType(CONTENT_TYPE))
        .andExpect(jsonPath("$.dataSources", hasSize(greaterThan(2))));
  }

  @Test
  public void describeConceptCapabilities() throws Exception {
    mockMvc
        .perform(getCapabilities())
        .andExpect(content().contentType(CONTENT_TYPE))
        .andExpect(
            jsonPath(
                "$.operations[?(@.type=='DescribeConcept')].serviceModules[0].parameters[*].name",
                containsInAnyOrder(CONCEPT, LANGUAGES, SERVICE, THESAURI, CROSS_WALKING, SOURCE)));
  }

}
