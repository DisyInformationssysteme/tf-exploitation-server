//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.core.config.data;

import static net.disy.eenvplus.tfes.core.api.capabilities.IDataSourceConfigurationMatcher.hasLanguages;
import static net.disy.eenvplus.tfes.core.api.capabilities.IDataSourceConfigurationMatcher.hasName;
import static net.disy.eenvplus.tfes.core.api.capabilities.IDataSourceConfigurationMatcher.hasRank;
import static net.disy.eenvplus.tfes.core.api.capabilities.IDataSourceConfigurationMatcher.hasUri;
import static net.disy.eenvplus.tfes.core.config.data.DataSourceConfigurationTestDataFactory.DE;
import static net.disy.eenvplus.tfes.core.config.data.DataSourceConfigurationTestDataFactory.EN;
import static net.disy.eenvplus.tfes.core.config.data.DataSourceConfigurationTestDataFactory.THAT_SOURCE_NAME;
import static net.disy.eenvplus.tfes.core.config.data.DataSourceConfigurationTestDataFactory.THAT_SOURCE_RANK;
import static net.disy.eenvplus.tfes.core.config.data.DataSourceConfigurationTestDataFactory.THAT_SOURCE_URI;
import static net.disy.eenvplus.tfes.core.config.data.DataSourceConfigurationTestDataFactory.THIS_SOURCE_NAME;
import static net.disy.eenvplus.tfes.core.config.data.DataSourceConfigurationTestDataFactory.THIS_SOURCE_RANK;
import static net.disy.eenvplus.tfes.core.config.data.DataSourceConfigurationTestDataFactory.THIS_SOURCE_URI;
import static org.hamcrest.Matchers.both;
import static org.hamcrest.Matchers.closeTo;
import static org.hamcrest.Matchers.containsInAnyOrder;
import static org.hamcrest.Matchers.equalTo;
import net.disy.eenvplus.tfes.core.api.capabilities.IDataSourceConfiguration;

import org.hamcrest.core.CombinableMatcher;

// NOT_PUBLISHED

public class DataSourceConfigurationTestUtilities {

  public static final double TOLERANCE = 1e-9;

  private DataSourceConfigurationTestUtilities() {
  }

  public static CombinableMatcher<? super IDataSourceConfiguration> isThisTestSource() {
    return both(hasName(equalTo(THIS_SOURCE_NAME)))//
        .and(hasUri(equalTo(THIS_SOURCE_URI)))
        .and(hasLanguages(containsInAnyOrder(EN, DE)))
        .and(hasRank(closeTo(THIS_SOURCE_RANK, TOLERANCE)));
  }

  public static CombinableMatcher<? super IDataSourceConfiguration> isThatTestSource() {
    return both(hasName(equalTo(THAT_SOURCE_NAME)))//
        .and(hasUri(equalTo(THAT_SOURCE_URI)))
        .and(hasLanguages(containsInAnyOrder(EN)))
        .and(hasRank(closeTo(THAT_SOURCE_RANK, TOLERANCE)));
  }

}
