//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.web.integration;

import static org.hamcrest.Matchers.is;
import static org.hamcrest.Matchers.isEmptyOrNullString;
import static org.hamcrest.Matchers.not;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.hamcrest.Matcher;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

// NOT_PUBLISHED
@RunWith(SpringJUnit4ClassRunner.class)
@WebAppConfiguration
@ContextConfiguration("testApplicationContext.xml")
@ActiveProfiles("integration-test")
@SuppressWarnings("nls")
public class GetTopMostConceptsIT {

  private static final String CONTENT_TYPE = "application/json;charset=UTF-8";

  @Autowired
  private WebApplicationContext context;

  private MockMvc mockMvc;

  @Value("${rest.topmost.concept.path}")
  private String path;

  @Before
  public void createMockMvc() {
    mockMvc = MockMvcBuilders.webAppContextSetup(context).build();
  }

  @Test
  public void resultFormat() throws Exception {
    mockMvc
        .perform(getTopMostConcepts().param("maxCount", "2"))
        .andDo(MockMvcResultHandlers.print())
        .andExpect(status().isOk())
        .andExpect(content().contentType(CONTENT_TYPE))
        .andExpect(jsonPath("$topMostConcept[0].keyword[0].title", hasAnyValue()))
        .andExpect(jsonPath("$topMostConcept[0].keyword[0].language", hasAnyValue()))
        .andExpect(jsonPath("$topMostConcept[0].keyword[0].conceptUri", hasAnyValue()))
        .andExpect(
            jsonPath("$topMostConcept[0].skosConceptScheme.skosConceptSchemeURI", hasAnyValue()))
        .andExpect(jsonPath("$topMostConcept[0].skosConceptScheme.language", hasAnyValue()))
        .andExpect(
            jsonPath("$topMostConcept[0].skosConceptScheme.skosConceptSchemeLabel", hasAnyValue()));

  }

  private static Matcher<String> hasAnyValue() {
    return not(isEmptyOrNullString());
  }

  private MockHttpServletRequestBuilder getTopMostConcepts() {
    return MockMvcRequestBuilders.get("/" + path);
  }

  @Test
  public void filtersKeywordByLanguage() throws Exception {
    mockMvc
        .perform(getTopMostConcepts().param("maxCount", "2").param("languages", "it"))
        .andDo(MockMvcResultHandlers.print())
        .andExpect(status().isOk())
        .andExpect(content().contentType(CONTENT_TYPE))
        .andExpect(jsonPath("$topMostConcept[0].keyword[0].title", hasAnyValue()))
        .andExpect(jsonPath("$topMostConcept[0].keyword[0].language", is("it")))
        .andExpect(jsonPath("$topMostConcept[0].keyword[0].conceptUri", hasAnyValue()))
        .andExpect(
            jsonPath("$topMostConcept[0].skosConceptScheme.skosConceptSchemeURI", hasAnyValue()))
        .andExpect(jsonPath("$topMostConcept[0].skosConceptScheme.language", hasAnyValue()))
        .andExpect(
            jsonPath("$topMostConcept[0].skosConceptScheme.skosConceptSchemeLabel", hasAnyValue()));

  }
}
