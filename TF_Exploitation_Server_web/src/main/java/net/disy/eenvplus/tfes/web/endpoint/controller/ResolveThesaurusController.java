//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.web.endpoint.controller;

import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.CONCEPT;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.EXTRA_PARAMS;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.LANGUAGES;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.MAX_COUNT;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.SERVICE;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.THESAURI;
import static net.disy.eenvplus.tfes.web.endpoint.query.ServiceQueryBuilder.createResolveThesaurusQuery;
import net.disy.eenvplus.tfes.core.api.exceptions.ServiceException;
import net.disy.eenvplus.tfes.core.api.response.IResolveThesaurus;
import net.disy.eenvplus.tfes.core.api.service.IServiceManager;
import net.disy.eenvplus.tfes.web.api.exceptions.ErrorResponseCodes;
import net.disy.eenvplus.tfes.web.api.rest.RestApiCiCitation;
import net.disy.eenvplus.tfes.web.api.rest.RestApiCiDate;
import net.disy.eenvplus.tfes.web.api.rest.RestApiCiDateTypeCode;
import net.disy.eenvplus.tfes.web.api.rest.RestApiCiTitle;
import net.disy.eenvplus.tfes.web.api.rest.RestApiCitationObject;
import net.disy.eenvplus.tfes.web.api.rest.RestApiDate;
import net.disy.eenvplus.tfes.web.api.rest.RestApiDateDate;
import net.disy.eenvplus.tfes.web.api.rest.RestApiDateType;
import net.disy.eenvplus.tfes.web.endpoint.core.ISelfDescribingOperation;
import net.disy.eenvplus.tfes.web.endpoint.core.IllegalQueryArgumentException;
import net.disy.eenvplus.tfes.web.endpoint.core.OperationDescription;
import net.disy.eenvplus.tfes.web.endpoint.query.ServiceQuery;
import net.disy.eenvplus.tfes.web.validation.api.IConceptQueryValidator;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

// NOT_PUBLISHED

@RestController
@RequestMapping("${rest.resolvethesaurus.path}")
public class ResolveThesaurusController implements ISelfDescribingOperation {

  private static final String PATH_TEST = "rest.resolvethesaurus.path"; //$NON-NLS-1$

  @Autowired
  IServiceManager serviceManager;

  @Autowired
  IConceptQueryValidator queryValidator;

  @Autowired
  private Environment environment;

  @Override
  public OperationDescription getOperationDescription() {
    return OperationDescription.Builder
        .createDescriptionFor(
            environment.getProperty(PATH_TEST),
            environment.getProperty(PATH_TEST))
        .withRequestMethod(RequestMethod.GET)
        .withServiceModules(serviceManager.getDescribeContextDescriptions())
        .withStringParameter(CONCEPT)
        .withStringParameter(THESAURI)
        .withStringParameter(SERVICE)
        .withStringParameter(LANGUAGES)
        .build();
  }

  @RequestMapping(method = RequestMethod.GET, produces = "application/json; charset=UTF-8")
  public RestApiCiCitation getResolveThesaurus(
      @RequestParam(value = CONCEPT) String concept,
      @RequestParam(value = MAX_COUNT, defaultValue = "0") int maxCount,
      @RequestParam(value = THESAURI, defaultValue = "") String thesauri,
      @RequestParam(value = SERVICE, defaultValue = "") String service,
      @RequestParam(value = LANGUAGES, defaultValue = "") String languages,
      @RequestParam(value = EXTRA_PARAMS, defaultValue = "") String extraParams)
      throws ServiceException {

    ServiceQuery query = createResolveThesaurusQuery(concept)
        .withMaxCount(maxCount)
        .withThesauri(thesauri)
        .withServiceModules(service)
        .withLanguages(languages)
        .withExtraParameters(extraParams)
        .build();
    queryValidator.validate(query);
    IResolveThesaurus resolvedThesaurus = serviceManager.getResolveThesaurus(query);
    if (resolvedThesaurus == null) {
      throw new IllegalQueryArgumentException(ErrorResponseCodes.UNKNOWN_CONCEPT, concept);
    }
    return createResponse(resolvedThesaurus);
  }

  private RestApiCiDateTypeCode createCiDateTypeCode(IResolveThesaurus resolvedThesaurus) {
    RestApiCiDateTypeCode response = new RestApiCiDateTypeCode();
    response.setCodeList(resolvedThesaurus.getCodeList());
    response.setCodeListValue(resolvedThesaurus.getCodeListValue());
    return response;
  }

  private RestApiDateType createCiDateType(IResolveThesaurus resolvedThesaurus) {
    RestApiDateType response = new RestApiDateType();
    response.setCiDateTypeCode(createCiDateTypeCode(resolvedThesaurus));
    return response;
  }

  private RestApiDateDate createCiDateDate(IResolveThesaurus resolvedThesaurus) {
    RestApiDateDate response = new RestApiDateDate();
    response.setDate(resolvedThesaurus.getDate());
    return response;
  }

  private RestApiCiDate createCiDate(IResolveThesaurus resolvedThesaurus) {
    RestApiCiDate response = new RestApiCiDate();
    response.setDate(createCiDateDate(resolvedThesaurus));
    response.setDateType(createCiDateType(resolvedThesaurus));
    return response;
  }

  private RestApiDate createDate(IResolveThesaurus resolvedThesaurus) {
    RestApiDate response = new RestApiDate();
    response.setCiDate(createCiDate(resolvedThesaurus));
    return response;
  }

  private RestApiCiTitle createCiTitle(IResolveThesaurus resolvedThesaurus) {
    RestApiCiTitle response = new RestApiCiTitle();
    response.setCharacterString(resolvedThesaurus.getTitle());
    return response;
  }

  private RestApiCitationObject createCitationObject(IResolveThesaurus resolvedThesaurus) {
    RestApiCitationObject response = new RestApiCitationObject();
    response.setDate(createDate(resolvedThesaurus));
    response.setTitle(createCiTitle(resolvedThesaurus));
    return response;
  }

  private RestApiCiCitation createResponse(IResolveThesaurus resolvedThesaurus) {
    RestApiCiCitation response = new RestApiCiCitation();
    response.setCiCitation(createCitationObject(resolvedThesaurus));
    return response;
  }

}
