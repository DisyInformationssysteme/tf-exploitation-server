//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.core.module;


import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.concurrent.Callable;
import java.util.concurrent.Future;

import net.disy.eenvplus.tfes.core.api.exceptions.ServiceException;
import net.disy.eenvplus.tfes.core.api.modules.IResolveThesaurusProviderServiceModule;
import net.disy.eenvplus.tfes.core.api.query.IResolveThesaurusQuery;
import net.disy.eenvplus.tfes.core.api.response.IResolveThesaurus;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

// NOT_PUBLISHED
@Service
public class ResolveThesaurusModulesManager
    extends
    AbstractModuleManager<IResolveThesaurusProviderServiceModule, IResolveThesaurusQuery, IResolveThesaurus> {

  @Autowired(required = false)
  List<IResolveThesaurusProviderServiceModule> resolveThesaurusModules = new ArrayList<>();

  @Override
  protected List<IResolveThesaurusProviderServiceModule> getServiceModules() {
    return resolveThesaurusModules;
  }

  @Override
  protected Callable<IResolveThesaurus> createCallable(
      IResolveThesaurusQuery query,
      IResolveThesaurusProviderServiceModule module) {
    return module.getResolveThesaurus(query);
  }

  public IResolveThesaurus getResolveThesaurus(IResolveThesaurusQuery query) throws ServiceException {
    Set<Future<IResolveThesaurus>> futures = submitQuery(query);
    Collection<IResolveThesaurus> results = retrieveResults(futures);
    Iterator<IResolveThesaurus> result = results.iterator();
    if (result.hasNext()) {
      return result.next();
    }
    // was war das?
    return null;
  }

}
