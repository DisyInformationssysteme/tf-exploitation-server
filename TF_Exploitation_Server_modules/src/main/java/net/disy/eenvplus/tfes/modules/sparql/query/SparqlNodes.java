//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.modules.sparql.query;

import static java.util.Arrays.asList;
import static org.apache.commons.lang3.StringUtils.isBlank;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.apache.commons.lang3.StringUtils;

import com.hp.hpl.jena.graph.Node;
import com.hp.hpl.jena.graph.NodeFactory;
import com.hp.hpl.jena.sparql.core.Var;
import com.hp.hpl.jena.sparql.expr.E_Lang;
import com.hp.hpl.jena.sparql.expr.E_Str;
import com.hp.hpl.jena.sparql.expr.Expr;
import com.hp.hpl.jena.sparql.expr.ExprVar;
import com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueNode;
import com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueString;

// NOT_PUBLISHED

public enum SparqlNodes {
  BROADER("broader", "http://www.w3.org/2004/02/skos/core#broader"), //$NON-NLS-1$ //$NON-NLS-2$
  NARROWER("narrower", "http://www.w3.org/2004/02/skos/core#narrower"), //$NON-NLS-1$ //$NON-NLS-2$
  RELATED("related", "http://www.w3.org/2004/02/skos/core#related"), //$NON-NLS-1$ //$NON-NLS-2$
  PREF_LABEL("prefLabel", "http://www.w3.org/2004/02/skos/core#prefLabel"), //$NON-NLS-1$ //$NON-NLS-2$
  IN_SCHEME("schema", "http://www.w3.org/2004/02/skos/core#inScheme"), //$NON-NLS-1$ //$NON-NLS-2$
  CONCEPT("concept", "http://www.w3.org/2004/02/skos/core#Concept"), //$NON-NLS-1$ //$NON-NLS-2$
  CONCEPT_SCHEME("conceptScheme", "http://www.w3.org/2004/02/skos/core#ConceptScheme"), //$NON-NLS-1$ //$NON-NLS-2$
  RELATION("relation", ""), //$NON-NLS-1$ //$NON-NLS-2$
  LABEL("label", "http://www.w3.org/2000/01/rdf-schema#label"), //$NON-NLS-1$ //$NON-NLS-2$
  EXACT_MATCH("exactMatch", "http://www.w3.org/2004/02/skos/core#exactMatch"), //$NON-NLS-1$//$NON-NLS-2$
  BROAD_MATCH("broadMatch", "http://www.w3.org/2004/02/skos/core#broadMatch"), //$NON-NLS-1$//$NON-NLS-2$
  NARROW_MATCH("narrowMatch", "http://www.w3.org/2004/02/skos/core#narrowMatch"), //$NON-NLS-1$//$NON-NLS-2$
  RELATED_MATCH("relatedMatch", "http://www.w3.org/2004/02/skos/core#relatedMatch"), //$NON-NLS-1$//$NON-NLS-2$
  ALT_LABEL("altLabel", "http://www.w3.org/2004/02/skos/core#altLabel"), //$NON-NLS-1$ //$NON-NLS-2$
  TOP_MOST_CONCEPT("topMostConcept", "http://www.w3.org/2004/02/skos/core#hasTopConcept"), //$NON-NLS-1$ //$NON-NLS-2$
  LANGUAGE("languages", "http://purl.org/dc/elements/1.1/language"), //$NON-NLS-1$ //$NON-NLS-2$
  SORT_PRIORITY("sortPriority", "http://www.w3.org/ns/ui#sortPriority"); //$NON-NLS-1$ //$NON-NLS-2$

  private String label;
  private String uri;

  private SparqlNodes(String label, String uri) {
    this.label = label;
    this.uri = uri;
  }

  public static Collection<SparqlNodes> getRelations() {
    return asList(BROADER, NARROWER, RELATED);
  }

  public static List<String> getRelationUris() {
    Collection<SparqlNodes> relations = SparqlNodes.getRelations();
    List<String> labels = new ArrayList<>(relations.size());
    for (SparqlNodes relation : relations) {
      labels.add(relation.getUri());
    }
    return labels;
  }

  public String getLabel() {
    if (isBlank(label)) {
      throw new IllegalStateException("No Label specified for Node " + name()); //$NON-NLS-1$
    }
    return label;
  }

  public String getUri() {
    if (isBlank(uri)) {
      throw new IllegalStateException("No Uri specified for Node " + name()); //$NON-NLS-1$
    }
    return uri;
  }

  public Node createUriNode() {
    return NodeFactory.createURI(getUri());
  }

  public Node createVariableNode() {
    return NodeFactory.createVariable(getLabel());
  }

  public boolean hasUri(String uri) {
    return this.uri.equals(uri);
  }

  public Var createVar() {
    return Var.alloc(getLabel());
  }

  public NodeValueString createUriValueString() {
    return new NodeValueString(getUri());
  }

  public Expr createStringExprVar() {
    return new E_Str(createExprVar());
  }

  public ExprVar createExprVar() {
    return new ExprVar(getLabel());
  }

  public Expr createLangExprVar() {
    return new E_Lang(createExprVar());
  }

  public NodeValueNode createUriValueNode() {
    return new NodeValueNode(createUriNode());
  }

  public static String getLabelForUri(String uri) {
    for (SparqlNodes current : values()) {
      if (current.hasUri(uri)) {
        return current.getLabel();
      }
    }
    return StringUtils.EMPTY;
  }

}
